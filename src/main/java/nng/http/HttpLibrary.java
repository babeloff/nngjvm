package nng.http;
import java.util.Collections;
import java.util.Iterator;
import nng.httpapi.HttpApiLibrary.nng_http_client;
import nng.httpapi.HttpApiLibrary.nng_http_conn;
import nng.httpapi.HttpApiLibrary.nng_http_handler;
import nng.httpapi.HttpApiLibrary.nng_http_req;
import nng.httpapi.HttpApiLibrary.nng_http_res;
import nng.httpapi.HttpApiLibrary.nng_http_server;
import nng.nng.nng_url;
import nng.tlsapi.TlsApiLibrary.nng_aio;
import nng.tlsapi.TlsApiLibrary.nng_tls_config;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>http</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("http") 
@Runtime(CRuntime.class) 
public class HttpLibrary {
	static {
		BridJ.register();
	}
	/**
	 * HTTP status codes.  This list is not exhaustive.<br>
	 * enum values<br>
	 * <i>native declaration : supplemental/http/http.h:62</i>
	 */
	public enum nng_http_status implements IntValuedEnum<nng_http_status > {
		NNG_HTTP_STATUS_CONTINUE(100),
		NNG_HTTP_STATUS_SWITCHING(101),
		NNG_HTTP_STATUS_PROCESSING(102),
		NNG_HTTP_STATUS_OK(200),
		NNG_HTTP_STATUS_CREATED(201),
		NNG_HTTP_STATUS_ACCEPTED(202),
		NNG_HTTP_STATUS_NOT_AUTHORITATIVE(203),
		NNG_HTTP_STATUS_NO_CONTENT(204),
		NNG_HTTP_STATUS_RESET_CONTENT(205),
		NNG_HTTP_STATUS_PARTIAL_CONTENT(206),
		NNG_HTTP_STATUS_MULTI_STATUS(207),
		NNG_HTTP_STATUS_ALREADY_REPORTED(208),
		NNG_HTTP_STATUS_IM_USED(226),
		NNG_HTTP_STATUS_MULTIPLE_CHOICES(300),
		NNG_HTTP_STATUS_STATUS_MOVED_PERMANENTLY(301),
		NNG_HTTP_STATUS_FOUND(302),
		NNG_HTTP_STATUS_SEE_OTHER(303),
		NNG_HTTP_STATUS_NOT_MODIFIED(304),
		NNG_HTTP_STATUS_USE_PROXY(305),
		NNG_HTTP_STATUS_TEMPORARY_REDIRECT(307),
		NNG_HTTP_STATUS_PERMANENT_REDIRECT(308),
		NNG_HTTP_STATUS_BAD_REQUEST(400),
		NNG_HTTP_STATUS_UNAUTHORIZED(401),
		NNG_HTTP_STATUS_PAYMENT_REQUIRED(402),
		NNG_HTTP_STATUS_FORBIDDEN(403),
		NNG_HTTP_STATUS_NOT_FOUND(404),
		NNG_HTTP_STATUS_METHOD_NOT_ALLOWED(405),
		NNG_HTTP_STATUS_NOT_ACCEPTABLE(406),
		NNG_HTTP_STATUS_PROXY_AUTH_REQUIRED(407),
		NNG_HTTP_STATUS_REQUEST_TIMEOUT(408),
		NNG_HTTP_STATUS_CONFLICT(409),
		NNG_HTTP_STATUS_GONE(410),
		NNG_HTTP_STATUS_LENGTH_REQUIRED(411),
		NNG_HTTP_STATUS_PRECONDITION_FAILED(412),
		NNG_HTTP_STATUS_PAYLOAD_TOO_LARGE(413),
		NNG_HTTP_STATUS_ENTITY_TOO_LONG(414),
		NNG_HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE(415),
		NNG_HTTP_STATUS_RANGE_NOT_SATISFIABLE(416),
		NNG_HTTP_STATUS_EXPECTATION_FAILED(417),
		NNG_HTTP_STATUS_TEAPOT(418),
		NNG_HTTP_STATUS_UNPROCESSABLE_ENTITY(422),
		NNG_HTTP_STATUS_LOCKED(423),
		NNG_HTTP_STATUS_FAILED_DEPENDENCY(424),
		NNG_HTTP_STATUS_UPGRADE_REQUIRED(426),
		NNG_HTTP_STATUS_PRECONDITION_REQUIRED(428),
		NNG_HTTP_STATUS_TOO_MANY_REQUESTS(429),
		NNG_HTTP_STATUS_HEADERS_TOO_LARGE(431),
		NNG_HTTP_STATUS_UNAVAIL_LEGAL_REASONS(451),
		NNG_HTTP_STATUS_INTERNAL_SERVER_ERROR(500),
		NNG_HTTP_STATUS_NOT_IMPLEMENTED(501),
		NNG_HTTP_STATUS_BAD_GATEWAY(502),
		NNG_HTTP_STATUS_SERVICE_UNAVAILABLE(503),
		NNG_HTTP_STATUS_GATEWAY_TIMEOUT(504),
		NNG_HTTP_STATUS_HTTP_VERSION_NOT_SUPP(505),
		NNG_HTTP_STATUS_VARIANT_ALSO_NEGOTIATES(506),
		NNG_HTTP_STATUS_INSUFFICIENT_STORAGE(507),
		NNG_HTTP_STATUS_LOOP_DETECTED(508),
		NNG_HTTP_STATUS_NOT_EXTENDED(510),
		NNG_HTTP_STATUS_NETWORK_AUTH_REQUIRED(511);
		nng_http_status(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_http_status > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_http_status > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : supplemental/http/http.h:400</i> */
	public static abstract class NngHttpHandlerAllocArg1Callback extends Callback<NngHttpHandlerAllocArg1Callback > {
		public void apply(Pointer<nng_aio > nng_aioPtr1) {
			apply(Pointer.getPeer(nng_aioPtr1));
		}
		public void apply(@Ptr long nng_aioPtr1) {
			apply((Pointer)Pointer.pointerToAddress(nng_aioPtr1, nng_aio.class));
		}
	};
	/** <i>native declaration : supplemental/http/http.h:401</i> */
	public static abstract class NngHttpHandlerSetDataArg1Callback extends Callback<NngHttpHandlerSetDataArg1Callback > {
		public void apply(Pointer<? > voidPtr1) {
			apply(Pointer.getPeer(voidPtr1));
		}
		public void apply(@Ptr long voidPtr1) {
			apply(Pointer.pointerToAddress(voidPtr1));
		}
	};
	/**
	 * need to be set explicitly.<br>
	 * Original signature : <code>int nng_http_req_alloc(nng_http_req**, const nng_url*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:69</i>
	 */
	@Name("nng_http_req_alloc") 
	public static int nngHttpReqAlloc(Pointer<Pointer<nng_http_req > > nng_http_reqPtrPtr1, Pointer<nng_url > nng_urlPtr1) {
		return nngHttpReqAlloc(Pointer.getPeer(nng_http_reqPtrPtr1), Pointer.getPeer(nng_urlPtr1));
	}
	@Name("nng_http_req_alloc") 
	protected native static int nngHttpReqAlloc(@Ptr long nng_http_reqPtrPtr1, @Ptr long nng_urlPtr1);
	/**
	 * nng_http_req_free frees an HTTP request object.<br>
	 * Original signature : <code>void nng_http_req_free(nng_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:74</i>
	 */
	@Name("nng_http_req_free") 
	public static void nngHttpReqFree(Pointer<nng_http_req > nng_http_reqPtr1) {
		nngHttpReqFree(Pointer.getPeer(nng_http_reqPtr1));
	}
	@Name("nng_http_req_free") 
	protected native static void nngHttpReqFree(@Ptr long nng_http_reqPtr1);
	/**
	 * nng_http_req_get_method returns the method.<br>
	 * Original signature : <code>char* nng_http_req_get_method(nng_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:79</i>
	 */
	@Name("nng_http_req_get_method") 
	public static Pointer<Byte > nngHttpReqGetMethod(Pointer<nng_http_req > nng_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpReqGetMethod(Pointer.getPeer(nng_http_reqPtr1)), Byte.class);
	}
	@Name("nng_http_req_get_method") 
	@Ptr 
	protected native static long nngHttpReqGetMethod(@Ptr long nng_http_reqPtr1);
	/**
	 * nng_http_req_get_version returns the version, usually HTTP/1.1.<br>
	 * Original signature : <code>char* nng_http_req_get_version(nng_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:84</i>
	 */
	@Name("nng_http_req_get_version") 
	public static Pointer<Byte > nngHttpReqGetVersion(Pointer<nng_http_req > nng_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpReqGetVersion(Pointer.getPeer(nng_http_reqPtr1)), Byte.class);
	}
	@Name("nng_http_req_get_version") 
	@Ptr 
	protected native static long nngHttpReqGetVersion(@Ptr long nng_http_reqPtr1);
	/**
	 * the scheme, host, or port.<br>
	 * Original signature : <code>char* nng_http_req_get_uri(nng_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:89</i>
	 */
	@Name("nng_http_req_get_uri") 
	public static Pointer<Byte > nngHttpReqGetUri(Pointer<nng_http_req > nng_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpReqGetUri(Pointer.getPeer(nng_http_reqPtr1)), Byte.class);
	}
	@Name("nng_http_req_get_uri") 
	@Ptr 
	protected native static long nngHttpReqGetUri(@Ptr long nng_http_reqPtr1);
	/**
	 * that might have been present.<br>
	 * Original signature : <code>int nng_http_req_set_header(nng_http_req*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:94</i>
	 */
	@Name("nng_http_req_set_header") 
	public static int nngHttpReqSetHeader(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpReqSetHeader(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_req_set_header") 
	protected native static int nngHttpReqSetHeader(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * with the same name that might have been present.<br>
	 * Original signature : <code>int nng_http_req_add_header(nng_http_req*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:99</i>
	 */
	@Name("nng_http_req_add_header") 
	public static int nngHttpReqAddHeader(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpReqAddHeader(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_req_add_header") 
	protected native static int nngHttpReqAddHeader(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * nng_http_req_del_header deletes all occurrences of a named header.<br>
	 * Original signature : <code>int nng_http_req_del_header(nng_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:104</i>
	 */
	@Name("nng_http_req_del_header") 
	public static int nngHttpReqDelHeader(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nngHttpReqDelHeader(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_req_del_header") 
	protected native static int nngHttpReqDelHeader(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * if not found.<br>
	 * Original signature : <code>char* nng_http_req_get_header(nng_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:109</i>
	 */
	@Name("nng_http_req_get_header") 
	public static Pointer<Byte > nngHttpReqGetHeader(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpReqGetHeader(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Name("nng_http_req_get_header") 
	@Ptr 
	protected native static long nngHttpReqGetHeader(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Null sets the default ("GET").<br>
	 * Original signature : <code>int nng_http_req_set_method(nng_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:114</i>
	 */
	@Name("nng_http_req_set_method") 
	public static int nngHttpReqSetMethod(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nngHttpReqSetMethod(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_req_set_method") 
	protected native static int nngHttpReqSetMethod(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * not support HTTP/2 at all.  Null sets the default ("HTTP/1.1").<br>
	 * Original signature : <code>int nng_http_req_set_version(nng_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:119</i>
	 */
	@Name("nng_http_req_set_version") 
	public static int nngHttpReqSetVersion(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nngHttpReqSetVersion(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_req_set_version") 
	protected native static int nngHttpReqSetVersion(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * start with a leading '/' per HTTP.<br>
	 * Original signature : <code>int nng_http_req_set_uri(nng_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:124</i>
	 */
	@Name("nng_http_req_set_uri") 
	public static int nngHttpReqSetUri(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nngHttpReqSetUri(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_req_set_uri") 
	protected native static int nngHttpReqSetUri(@Ptr long nng_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * probably set the content-type header.<br>
	 * Original signature : <code>int nng_http_req_set_data(nng_http_req*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:129</i>
	 */
	@Name("nng_http_req_set_data") 
	public static int nngHttpReqSetData(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngHttpReqSetData(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_http_req_set_data") 
	protected native static int nngHttpReqSetData(@Ptr long nng_http_reqPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * probably set the content-type header.<br>
	 * Original signature : <code>int nng_http_req_copy_data(nng_http_req*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:134</i>
	 */
	@Name("nng_http_req_copy_data") 
	public static int nngHttpReqCopyData(Pointer<nng_http_req > nng_http_reqPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngHttpReqCopyData(Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_http_req_copy_data") 
	protected native static int nngHttpReqCopyData(@Ptr long nng_http_reqPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * initialized for an HTTP/1.1 200 OK response by default.<br>
	 * Original signature : <code>int nng_http_res_alloc(nng_http_res**)</code><br>
	 * <i>native declaration : supplemental/http/http.h:141</i>
	 */
	@Name("nng_http_res_alloc") 
	public static int nngHttpResAlloc(Pointer<Pointer<nng_http_res > > nng_http_resPtrPtr1) {
		return nngHttpResAlloc(Pointer.getPeer(nng_http_resPtrPtr1));
	}
	@Name("nng_http_res_alloc") 
	protected native static int nngHttpResAlloc(@Ptr long nng_http_resPtrPtr1);
	/**
	 * generic HTML error page.<br>
	 * Original signature : <code>int nng_http_res_alloc_error(nng_http_res**, uint16_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:146</i>
	 */
	@Name("nng_http_res_alloc_error") 
	public static int nngHttpResAllocError(Pointer<Pointer<nng_http_res > > nng_http_resPtrPtr1, short uint16_t1) {
		return nngHttpResAllocError(Pointer.getPeer(nng_http_resPtrPtr1), uint16_t1);
	}
	@Name("nng_http_res_alloc_error") 
	protected native static int nngHttpResAllocError(@Ptr long nng_http_resPtrPtr1, short uint16_t1);
	/**
	 * nng_http_res_free frees an HTTP response object.<br>
	 * Original signature : <code>void nng_http_res_free(nng_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:151</i>
	 */
	@Name("nng_http_res_free") 
	public static void nngHttpResFree(Pointer<nng_http_res > nng_http_resPtr1) {
		nngHttpResFree(Pointer.getPeer(nng_http_resPtr1));
	}
	@Name("nng_http_res_free") 
	protected native static void nngHttpResFree(@Ptr long nng_http_resPtr1);
	/**
	 * nng_http_res_get_status returns the HTTP status code from the server.<br>
	 * Original signature : <code>uint16_t nng_http_res_get_status(nng_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:156</i>
	 */
	@Name("nng_http_res_get_status") 
	public static short nngHttpResGetStatus(Pointer<nng_http_res > nng_http_resPtr1) {
		return nngHttpResGetStatus(Pointer.getPeer(nng_http_resPtr1));
	}
	@Name("nng_http_res_get_status") 
	protected native static short nngHttpResGetStatus(@Ptr long nng_http_resPtr1);
	/**
	 * nng_http_res_set_status sets the HTTP status code.<br>
	 * Original signature : <code>int nng_http_res_set_status(nng_http_res*, uint16_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:161</i>
	 */
	@Name("nng_http_res_set_status") 
	public static int nngHttpResSetStatus(Pointer<nng_http_res > nng_http_resPtr1, short uint16_t1) {
		return nngHttpResSetStatus(Pointer.getPeer(nng_http_resPtr1), uint16_t1);
	}
	@Name("nng_http_res_set_status") 
	protected native static int nngHttpResSetStatus(@Ptr long nng_http_resPtr1, short uint16_t1);
	/**
	 * that the server responds (or responded) with.<br>
	 * Original signature : <code>char* nng_http_res_get_reason(nng_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:166</i>
	 */
	@Name("nng_http_res_get_reason") 
	public static Pointer<Byte > nngHttpResGetReason(Pointer<nng_http_res > nng_http_resPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpResGetReason(Pointer.getPeer(nng_http_resPtr1)), Byte.class);
	}
	@Name("nng_http_res_get_reason") 
	@Ptr 
	protected native static long nngHttpResGetReason(@Ptr long nng_http_resPtr1);
	/**
	 * NULL means that a default reason is used based on the status code.<br>
	 * Original signature : <code>int nng_http_res_set_reason(nng_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:171</i>
	 */
	@Name("nng_http_res_set_reason") 
	public static int nngHttpResSetReason(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1) {
		return nngHttpResSetReason(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_res_set_reason") 
	protected native static int nngHttpResSetReason(@Ptr long nng_http_resPtr1, @Ptr long charPtr1);
	/**
	 * that might have been present.<br>
	 * Original signature : <code>int nng_http_res_set_header(nng_http_res*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:176</i>
	 */
	@Name("nng_http_res_set_header") 
	public static int nngHttpResSetHeader(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpResSetHeader(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_res_set_header") 
	protected native static int nngHttpResSetHeader(@Ptr long nng_http_resPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * with the same name that might have been present.<br>
	 * Original signature : <code>int nng_http_res_add_header(nng_http_res*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:181</i>
	 */
	@Name("nng_http_res_add_header") 
	public static int nngHttpResAddHeader(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpResAddHeader(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_res_add_header") 
	protected native static int nngHttpResAddHeader(@Ptr long nng_http_resPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * nng_http_res_del_header deletes all occurrences of a named header.<br>
	 * Original signature : <code>int nng_http_res_del_header(nng_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:186</i>
	 */
	@Name("nng_http_res_del_header") 
	public static int nngHttpResDelHeader(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1) {
		return nngHttpResDelHeader(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_res_del_header") 
	protected native static int nngHttpResDelHeader(@Ptr long nng_http_resPtr1, @Ptr long charPtr1);
	/**
	 * if not found.<br>
	 * Original signature : <code>char* nng_http_res_get_header(nng_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:191</i>
	 */
	@Name("nng_http_res_get_header") 
	public static Pointer<Byte > nngHttpResGetHeader(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpResGetHeader(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Name("nng_http_res_get_header") 
	@Ptr 
	protected native static long nngHttpResGetHeader(@Ptr long nng_http_resPtr1, @Ptr long charPtr1);
	/**
	 * not support HTTP/2 at all.  NULL sets the default ("HTTP/1.1").<br>
	 * Original signature : <code>int nng_http_res_set_version(nng_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:196</i>
	 */
	@Name("nng_http_res_set_version") 
	public static int nngHttpResSetVersion(Pointer<nng_http_res > nng_http_resPtr1, Pointer<Byte > charPtr1) {
		return nngHttpResSetVersion(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_res_set_version") 
	protected native static int nngHttpResSetVersion(@Ptr long nng_http_resPtr1, @Ptr long charPtr1);
	/**
	 * nng_http_res_get_version returns the version, usually HTTP/1.1.<br>
	 * Original signature : <code>char* nng_http_res_get_version(nng_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:201</i>
	 */
	@Name("nng_http_res_get_version") 
	public static Pointer<Byte > nngHttpResGetVersion(Pointer<nng_http_res > nng_http_resPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngHttpResGetVersion(Pointer.getPeer(nng_http_resPtr1)), Byte.class);
	}
	@Name("nng_http_res_get_version") 
	@Ptr 
	protected native static long nngHttpResGetVersion(@Ptr long nng_http_resPtr1);
	/**
	 * probably set the content-type header.<br>
	 * Original signature : <code>int nng_http_res_set_data(nng_http_res*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:206</i>
	 */
	@Name("nng_http_res_set_data") 
	public static int nngHttpResSetData(Pointer<nng_http_res > nng_http_resPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngHttpResSetData(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_http_res_set_data") 
	protected native static int nngHttpResSetData(@Ptr long nng_http_resPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * probably set the content-type header.<br>
	 * Original signature : <code>int nng_http_res_copy_data(nng_http_res*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http.h:211</i>
	 */
	@Name("nng_http_res_copy_data") 
	public static int nngHttpResCopyData(Pointer<nng_http_res > nng_http_resPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngHttpResCopyData(Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_http_res_copy_data") 
	protected native static int nngHttpResCopyData(@Ptr long nng_http_resPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * not use this channel after this operation is performed.<br>
	 * Original signature : <code>void nng_http_conn_close(nng_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:218</i>
	 */
	@Name("nng_http_conn_close") 
	public static void nngHttpConnClose(Pointer<nng_http_conn > nng_http_connPtr1) {
		nngHttpConnClose(Pointer.getPeer(nng_http_connPtr1));
	}
	@Name("nng_http_conn_close") 
	protected native static void nngHttpConnClose(@Ptr long nng_http_connPtr1);
	/**
	 * for the entire aio to be filled.<br>
	 * Original signature : <code>void nng_http_conn_read(nng_http_conn*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:223</i>
	 */
	@Name("nng_http_conn_read") 
	public static void nngHttpConnRead(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnRead(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_read") 
	protected native static void nngHttpConnRead(@Ptr long nng_http_connPtr1, @Ptr long nng_aioPtr1);
	/**
	 * finish until either all the requested data is read, or an error occurs.<br>
	 * Original signature : <code>void nng_http_conn_read_all(nng_http_conn*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:228</i>
	 */
	@Name("nng_http_conn_read_all") 
	public static void nngHttpConnReadAll(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnReadAll(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_read_all") 
	protected native static void nngHttpConnReadAll(@Ptr long nng_http_connPtr1, @Ptr long nng_aioPtr1);
	/**
	 * byte is written.)<br>
	 * Original signature : <code>void nng_http_conn_write(nng_http_conn*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:233</i>
	 */
	@Name("nng_http_conn_write") 
	public static void nngHttpConnWrite(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnWrite(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_write") 
	protected native static void nngHttpConnWrite(@Ptr long nng_http_connPtr1, @Ptr long nng_aioPtr1);
	/**
	 * finish until either all the requested data is written, or an error occurs.<br>
	 * Original signature : <code>void nng_http_conn_write_all(nng_http_conn*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:238</i>
	 */
	@Name("nng_http_conn_write_all") 
	public static void nngHttpConnWriteAll(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnWriteAll(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_write_all") 
	protected native static void nngHttpConnWriteAll(@Ptr long nng_http_connPtr1, @Ptr long nng_aioPtr1);
	/**
	 * data that has been attached.<br>
	 * Original signature : <code>void nng_http_conn_write_req(nng_http_conn*, nng_http_req*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:243</i>
	 */
	@Name("nng_http_conn_write_req") 
	public static void nngHttpConnWriteReq(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_http_req > nng_http_reqPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnWriteReq(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_write_req") 
	protected native static void nngHttpConnWriteReq(@Ptr long nng_http_connPtr1, @Ptr long nng_http_reqPtr1, @Ptr long nng_aioPtr1);
	/**
	 * data that has been attached.<br>
	 * Original signature : <code>void nng_http_conn_write_res(nng_http_conn*, nng_http_res*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:248</i>
	 */
	@Name("nng_http_conn_write_res") 
	public static void nngHttpConnWriteRes(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_http_res > nng_http_resPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnWriteRes(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_write_res") 
	protected native static void nngHttpConnWriteRes(@Ptr long nng_http_connPtr1, @Ptr long nng_http_resPtr1, @Ptr long nng_aioPtr1);
	/**
	 * and reading any submitted entity data itself.<br>
	 * Original signature : <code>void nng_http_conn_read_req(nng_http_conn*, nng_http_req*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:253</i>
	 */
	@Name("nng_http_conn_read_req") 
	public static void nngHttpConnReadReq(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_http_req > nng_http_reqPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnReadReq(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_http_reqPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_read_req") 
	protected native static void nngHttpConnReadReq(@Ptr long nng_http_connPtr1, @Ptr long nng_http_reqPtr1, @Ptr long nng_aioPtr1);
	/**
	 * and reading any submitted entity data itself.<br>
	 * Original signature : <code>void nng_http_conn_read_res(nng_http_conn*, nng_http_res*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:258</i>
	 */
	@Name("nng_http_conn_read_res") 
	public static void nngHttpConnReadRes(Pointer<nng_http_conn > nng_http_connPtr1, Pointer<nng_http_res > nng_http_resPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpConnReadRes(Pointer.getPeer(nng_http_connPtr1), Pointer.getPeer(nng_http_resPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_conn_read_res") 
	protected native static void nngHttpConnReadRes(@Ptr long nng_http_connPtr1, @Ptr long nng_http_resPtr1, @Ptr long nng_aioPtr1);
	/**
	 * a 500 error response to the client.)<br>
	 * Original signature : <code>int nng_http_handler_alloc(nng_http_handler**, const char*, NngHttpHandlerAllocArg1Callback*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:265</i>
	 */
	@Name("nng_http_handler_alloc") 
	public static int nngHttpHandlerAlloc(Pointer<Pointer<nng_http_handler > > nng_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<HttpLibrary.NngHttpHandlerAllocArg1Callback > arg1) {
		return nngHttpHandlerAlloc(Pointer.getPeer(nng_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(arg1));
	}
	@Name("nng_http_handler_alloc") 
	protected native static int nngHttpHandlerAlloc(@Ptr long nng_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long arg1);
	/**
	 * server.  The server will also call this when it is destroyed.<br>
	 * Original signature : <code>void nng_http_handler_free(nng_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:270</i>
	 */
	@Name("nng_http_handler_free") 
	public static void nngHttpHandlerFree(Pointer<nng_http_handler > nng_http_handlerPtr1) {
		nngHttpHandlerFree(Pointer.getPeer(nng_http_handlerPtr1));
	}
	@Name("nng_http_handler_free") 
	protected native static void nngHttpHandlerFree(@Ptr long nng_http_handlerPtr1);
	/**
	 * supplied is determined from the file name using a simple built-in map.<br>
	 * Original signature : <code>int nng_http_handler_alloc_file(nng_http_handler**, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:275</i>
	 */
	@Name("nng_http_handler_alloc_file") 
	public static int nngHttpHandlerAllocFile(Pointer<Pointer<nng_http_handler > > nng_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpHandlerAllocFile(Pointer.getPeer(nng_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_handler_alloc_file") 
	protected native static int nngHttpHandlerAllocFile(@Ptr long nng_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * "application/octet-stream" is assumed.)<br>
	 * Original signature : <code>int nng_http_handler_alloc_static(nng_http_handler**, const char*, const void*, size_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:280</i>
	 */
	@Name("nng_http_handler_alloc_static") 
	public static int nngHttpHandlerAllocStatic(Pointer<Pointer<nng_http_handler > > nng_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1, Pointer<Byte > charPtr2) {
		return nngHttpHandlerAllocStatic(Pointer.getPeer(nng_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1, Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_handler_alloc_static") 
	protected native static int nngHttpHandlerAllocStatic(@Ptr long nng_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1, @Ptr long charPtr2);
	/**
	 * files is determined from the file name using a simple built-in map.<br>
	 * Original signature : <code>int nng_http_handler_alloc_directory(nng_http_handler**, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:285</i>
	 */
	@Name("nng_http_handler_alloc_directory") 
	public static int nngHttpHandlerAllocDirectory(Pointer<Pointer<nng_http_handler > > nng_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngHttpHandlerAllocDirectory(Pointer.getPeer(nng_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_http_handler_alloc_directory") 
	protected native static int nngHttpHandlerAllocDirectory(@Ptr long nng_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * inspect the method itself.<br>
	 * Original signature : <code>int nng_http_handler_set_method(nng_http_handler*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:290</i>
	 */
	@Name("nng_http_handler_set_method") 
	public static int nngHttpHandlerSetMethod(Pointer<nng_http_handler > nng_http_handlerPtr1, Pointer<Byte > charPtr1) {
		return nngHttpHandlerSetMethod(Pointer.getPeer(nng_http_handlerPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_handler_set_method") 
	protected native static int nngHttpHandlerSetMethod(@Ptr long nng_http_handlerPtr1, @Ptr long charPtr1);
	/**
	 * that case is not considered.)<br>
	 * Original signature : <code>int nng_http_handler_set_host(nng_http_handler*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:295</i>
	 */
	@Name("nng_http_handler_set_host") 
	public static int nngHttpHandlerSetHost(Pointer<nng_http_handler > nng_http_handlerPtr1, Pointer<Byte > charPtr1) {
		return nngHttpHandlerSetHost(Pointer.getPeer(nng_http_handlerPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_handler_set_host") 
	protected native static int nngHttpHandlerSetHost(@Ptr long nng_http_handlerPtr1, @Ptr long charPtr1);
	/**
	 * called for an exact path match.<br>
	 * Original signature : <code>int nng_http_handler_set_tree(nng_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:300</i>
	 */
	@Name("nng_http_handler_set_tree") 
	public static int nngHttpHandlerSetTree(Pointer<nng_http_handler > nng_http_handlerPtr1) {
		return nngHttpHandlerSetTree(Pointer.getPeer(nng_http_handlerPtr1));
	}
	@Name("nng_http_handler_set_tree") 
	protected native static int nngHttpHandlerSetTree(@Ptr long nng_http_handlerPtr1);
	/**
	 * is being deallocated.)<br>
	 * Original signature : <code>int nng_http_handler_set_data(nng_http_handler*, void*, NngHttpHandlerSetDataArg1Callback*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:305</i>
	 */
	@Name("nng_http_handler_set_data") 
	public static int nngHttpHandlerSetData(Pointer<nng_http_handler > nng_http_handlerPtr1, Pointer<? > voidPtr1, Pointer<HttpLibrary.NngHttpHandlerSetDataArg1Callback > arg1) {
		return nngHttpHandlerSetData(Pointer.getPeer(nng_http_handlerPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(arg1));
	}
	@Name("nng_http_handler_set_data") 
	protected native static int nngHttpHandlerSetData(@Ptr long nng_http_handlerPtr1, @Ptr long voidPtr1, @Ptr long arg1);
	/**
	 * nng_http_handler_get_data returns the data that was previously stored.<br>
	 * Original signature : <code>void* nng_http_handler_get_data(nng_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:310</i>
	 */
	@Name("nng_http_handler_get_data") 
	public static Pointer<? > nngHttpHandlerGetData(Pointer<nng_http_handler > nng_http_handlerPtr1) {
		return Pointer.pointerToAddress(nngHttpHandlerGetData(Pointer.getPeer(nng_http_handlerPtr1)));
	}
	@Name("nng_http_handler_get_data") 
	@Ptr 
	protected native static long nngHttpHandlerGetData(@Ptr long nng_http_handlerPtr1);
	/**
	 * is created.<br>
	 * Original signature : <code>int nng_http_server_hold(nng_http_server**, const nng_url*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:317</i>
	 */
	@Name("nng_http_server_hold") 
	public static int nngHttpServerHold(Pointer<Pointer<nng_http_server > > nng_http_serverPtrPtr1, Pointer<nng_url > nng_urlPtr1) {
		return nngHttpServerHold(Pointer.getPeer(nng_http_serverPtrPtr1), Pointer.getPeer(nng_urlPtr1));
	}
	@Name("nng_http_server_hold") 
	protected native static int nngHttpServerHold(@Ptr long nng_http_serverPtrPtr1, @Ptr long nng_urlPtr1);
	/**
	 * last instance of the server, then it is shutdown and resources are freed.<br>
	 * Original signature : <code>void nng_http_server_release(nng_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:322</i>
	 */
	@Name("nng_http_server_release") 
	public static void nngHttpServerRelease(Pointer<nng_http_server > nng_http_serverPtr1) {
		nngHttpServerRelease(Pointer.getPeer(nng_http_serverPtr1));
	}
	@Name("nng_http_server_release") 
	protected native static void nngHttpServerRelease(@Ptr long nng_http_serverPtr1);
	/**
	 * any TLS configuration).<br>
	 * Original signature : <code>int nng_http_server_start(nng_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:327</i>
	 */
	@Name("nng_http_server_start") 
	public static int nngHttpServerStart(Pointer<nng_http_server > nng_http_serverPtr1) {
		return nngHttpServerStart(Pointer.getPeer(nng_http_serverPtr1));
	}
	@Name("nng_http_server_start") 
	protected native static int nngHttpServerStart(@Ptr long nng_http_serverPtr1);
	/**
	 * server may not be reused.<br>
	 * Original signature : <code>void nng_http_server_stop(nng_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:332</i>
	 */
	@Name("nng_http_server_stop") 
	public static void nngHttpServerStop(Pointer<nng_http_server > nng_http_serverPtr1) {
		nngHttpServerStop(Pointer.getPeer(nng_http_serverPtr1));
	}
	@Name("nng_http_server_stop") 
	protected native static void nngHttpServerStop(@Ptr long nng_http_serverPtr1);
	/**
	 * Method, and URL.)<br>
	 * Original signature : <code>int nng_http_server_add_handler(nng_http_server*, nng_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:337</i>
	 */
	@Name("nng_http_server_add_handler") 
	public static int nngHttpServerAddHandler(Pointer<nng_http_server > nng_http_serverPtr1, Pointer<nng_http_handler > nng_http_handlerPtr1) {
		return nngHttpServerAddHandler(Pointer.getPeer(nng_http_serverPtr1), Pointer.getPeer(nng_http_handlerPtr1));
	}
	@Name("nng_http_server_add_handler") 
	protected native static int nngHttpServerAddHandler(@Ptr long nng_http_serverPtr1, @Ptr long nng_http_handlerPtr1);
	/**
	 * to make assumptions about the validity of the handler.<br>
	 * Original signature : <code>int nng_http_server_del_handler(nng_http_server*, nng_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:342</i>
	 */
	@Name("nng_http_server_del_handler") 
	public static int nngHttpServerDelHandler(Pointer<nng_http_server > nng_http_serverPtr1, Pointer<nng_http_handler > nng_http_handlerPtr1) {
		return nngHttpServerDelHandler(Pointer.getPeer(nng_http_serverPtr1), Pointer.getPeer(nng_http_handlerPtr1));
	}
	@Name("nng_http_server_del_handler") 
	protected native static int nngHttpServerDelHandler(@Ptr long nng_http_serverPtr1, @Ptr long nng_http_handlerPtr1);
	/**
	 * over the TLS configuration.<br>
	 * Original signature : <code>int nng_http_server_set_tls(nng_http_server*, nng_tls_config*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:347</i>
	 */
	@Name("nng_http_server_set_tls") 
	public static int nngHttpServerSetTls(Pointer<nng_http_server > nng_http_serverPtr1, Pointer<nng_tls_config > nng_tls_configPtr1) {
		return nngHttpServerSetTls(Pointer.getPeer(nng_http_serverPtr1), Pointer.getPeer(nng_tls_configPtr1));
	}
	@Name("nng_http_server_set_tls") 
	protected native static int nngHttpServerSetTls(@Ptr long nng_http_serverPtr1, @Ptr long nng_tls_configPtr1);
	/**
	 * nng_http_server_set_tls function is called, so be careful.<br>
	 * Original signature : <code>int nng_http_server_get_tls(nng_http_server*, nng_tls_config**)</code><br>
	 * <i>native declaration : supplemental/http/http.h:352</i>
	 */
	@Name("nng_http_server_get_tls") 
	public static int nngHttpServerGetTls(Pointer<nng_http_server > nng_http_serverPtr1, Pointer<Pointer<nng_tls_config > > nng_tls_configPtrPtr1) {
		return nngHttpServerGetTls(Pointer.getPeer(nng_http_serverPtr1), Pointer.getPeer(nng_tls_configPtrPtr1));
	}
	@Name("nng_http_server_get_tls") 
	protected native static int nngHttpServerGetTls(@Ptr long nng_http_serverPtr1, @Ptr long nng_tls_configPtrPtr1);
	/**
	 * of letting the server do so, then this setting will be ignored.<br>
	 * Original signature : <code>int nng_http_server_set_error_page(nng_http_server*, uint16_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:357</i>
	 */
	@Name("nng_http_server_set_error_page") 
	public static int nngHttpServerSetErrorPage(Pointer<nng_http_server > nng_http_serverPtr1, short uint16_t1, Pointer<Byte > charPtr1) {
		return nngHttpServerSetErrorPage(Pointer.getPeer(nng_http_serverPtr1), uint16_t1, Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_server_set_error_page") 
	protected native static int nngHttpServerSetErrorPage(@Ptr long nng_http_serverPtr1, short uint16_t1, @Ptr long charPtr1);
	/**
	 * called anytime the contents of the named file have changed.<br>
	 * Original signature : <code>int nng_http_server_set_error_file(nng_http_server*, uint16_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:362</i>
	 */
	@Name("nng_http_server_set_error_file") 
	public static int nngHttpServerSetErrorFile(Pointer<nng_http_server > nng_http_serverPtr1, short uint16_t1, Pointer<Byte > charPtr1) {
		return nngHttpServerSetErrorFile(Pointer.getPeer(nng_http_serverPtr1), uint16_t1, Pointer.getPeer(charPtr1));
	}
	@Name("nng_http_server_set_error_file") 
	protected native static int nngHttpServerSetErrorFile(@Ptr long nng_http_serverPtr1, short uint16_t1, @Ptr long charPtr1);
	/**
	 * nng_http_res_set_status or implicitly via nng_http_res_alloc_error.<br>
	 * Original signature : <code>int nng_http_server_res_error(nng_http_server*, nng_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:367</i>
	 */
	@Name("nng_http_server_res_error") 
	public static int nngHttpServerResError(Pointer<nng_http_server > nng_http_serverPtr1, Pointer<nng_http_res > nng_http_resPtr1) {
		return nngHttpServerResError(Pointer.getPeer(nng_http_serverPtr1), Pointer.getPeer(nng_http_resPtr1));
	}
	@Name("nng_http_server_res_error") 
	protected native static int nngHttpServerResError(@Ptr long nng_http_serverPtr1, @Ptr long nng_http_resPtr1);
	/**
	 * further processing.)<br>
	 * Original signature : <code>int nng_http_hijack(nng_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:372</i>
	 */
	@Name("nng_http_hijack") 
	public static int nngHttpHijack(Pointer<nng_http_conn > nng_http_connPtr1) {
		return nngHttpHijack(Pointer.getPeer(nng_http_connPtr1));
	}
	@Name("nng_http_hijack") 
	protected native static int nngHttpHijack(@Ptr long nng_http_connPtr1);
	/**
	 * the given URL.<br>
	 * Original signature : <code>int nng_http_client_alloc(nng_http_client**, const nng_url*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:379</i>
	 */
	@Name("nng_http_client_alloc") 
	public static int nngHttpClientAlloc(Pointer<Pointer<nng_http_client > > nng_http_clientPtrPtr1, Pointer<nng_url > nng_urlPtr1) {
		return nngHttpClientAlloc(Pointer.getPeer(nng_http_clientPtrPtr1), Pointer.getPeer(nng_urlPtr1));
	}
	@Name("nng_http_client_alloc") 
	protected native static int nngHttpClientAlloc(@Ptr long nng_http_clientPtrPtr1, @Ptr long nng_urlPtr1);
	/**
	 * the client are not necessarily closed.<br>
	 * Original signature : <code>void nng_http_client_free(nng_http_client*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:384</i>
	 */
	@Name("nng_http_client_free") 
	public static void nngHttpClientFree(Pointer<nng_http_client > nng_http_clientPtr1) {
		nngHttpClientFree(Pointer.getPeer(nng_http_clientPtr1));
	}
	@Name("nng_http_client_free") 
	protected native static void nngHttpClientFree(@Ptr long nng_http_clientPtr1);
	/**
	 * caller needs complete control over the TLS configuration.<br>
	 * Original signature : <code>int nng_http_client_set_tls(nng_http_client*, nng_tls_config*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:389</i>
	 */
	@Name("nng_http_client_set_tls") 
	public static int nngHttpClientSetTls(Pointer<nng_http_client > nng_http_clientPtr1, Pointer<nng_tls_config > nng_tls_configPtr1) {
		return nngHttpClientSetTls(Pointer.getPeer(nng_http_clientPtr1), Pointer.getPeer(nng_tls_configPtr1));
	}
	@Name("nng_http_client_set_tls") 
	protected native static int nngHttpClientSetTls(@Ptr long nng_http_clientPtr1, @Ptr long nng_tls_configPtr1);
	/**
	 * be invalidated by any future calls to nni_http_client_set_tls.<br>
	 * Original signature : <code>int nng_http_client_get_tls(nng_http_client*, nng_tls_config**)</code><br>
	 * <i>native declaration : supplemental/http/http.h:394</i>
	 */
	@Name("nng_http_client_get_tls") 
	public static int nngHttpClientGetTls(Pointer<nng_http_client > nng_http_clientPtr1, Pointer<Pointer<nng_tls_config > > nng_tls_configPtrPtr1) {
		return nngHttpClientGetTls(Pointer.getPeer(nng_http_clientPtr1), Pointer.getPeer(nng_tls_configPtrPtr1));
	}
	@Name("nng_http_client_get_tls") 
	protected native static int nngHttpClientGetTls(@Ptr long nng_http_clientPtr1, @Ptr long nng_tls_configPtrPtr1);
	/**
	 * in the first (index 0) output for the aio.<br>
	 * Original signature : <code>void nng_http_client_connect(nng_http_client*, nng_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http.h:399</i>
	 */
	@Name("nng_http_client_connect") 
	public static void nngHttpClientConnect(Pointer<nng_http_client > nng_http_clientPtr1, Pointer<nng_aio > nng_aioPtr1) {
		nngHttpClientConnect(Pointer.getPeer(nng_http_clientPtr1), Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_http_client_connect") 
	protected native static void nngHttpClientConnect(@Ptr long nng_http_clientPtr1, @Ptr long nng_aioPtr1);
}
