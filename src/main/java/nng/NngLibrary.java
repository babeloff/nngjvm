package nng;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>nng</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("nng") 
@Runtime(CRuntime.class) 
public class NngLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : nng.h:72</i>
	 */
	public enum nng_sockaddr_family implements IntValuedEnum<nng_sockaddr_family > {
		NNG_AF_UNSPEC(0),
		NNG_AF_INPROC(1),
		NNG_AF_IPC(2),
		NNG_AF_INET(3),
		NNG_AF_INET6(4),
		/** ZeroTier */
		NNG_AF_ZT(5);
		nng_sockaddr_family(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_sockaddr_family > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_sockaddr_family > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : nng.h:140</i>
	 */
	public enum nng_pipe_ev implements IntValuedEnum<nng_pipe_ev > {
		NNG_PIPE_EV_ADD_PRE(0),
		NNG_PIPE_EV_ADD_POST(1),
		NNG_PIPE_EV_REM_POST(2),
		NNG_PIPE_EV_NUM(3);
		nng_pipe_ev(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_pipe_ev > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_pipe_ev > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	}
	/**
	 * Flags.<br>
	 * enum values<br>
	 * <i>native declaration : nng.h:582</i>
	 */
	public enum nng_flag_enum implements IntValuedEnum<nng_flag_enum > {
		/** Recv to allocate receive buffer. */
		NNG_FLAG_ALLOC(1),
		/** Non-blocking operations. */
		NNG_FLAG_NONBLOCK(2);
		nng_flag_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_flag_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_flag_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * NNG_DECL int nng_stat_type(nng_stat *);<br>
	 * enum values<br>
	 * <i>native declaration : nng.h:589</i>
	 */
	public enum nng_stat_type_enum implements IntValuedEnum<nng_stat_type_enum > {
		/** Numeric "absolute" value, diffs meaningless */
		NNG_STAT_LEVEL(0),
		/** Incrementing value (diffs are meaningful) */
		NNG_STAT_COUNTER(1);
		nng_stat_type_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_stat_type_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_stat_type_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	}
	/**
	 * NNG_DECL int nng_stat_unit(nng_stat *);<br>
	 * enum values<br>
	 * <i>native declaration : nng.h:598</i>
	 */
	public enum nng_unit_enum implements IntValuedEnum<nng_unit_enum > {
		NNG_UNIT_NONE(0),
		NNG_UNIT_BYTES(1),
		NNG_UNIT_MESSAGES(2),
		NNG_UNIT_BOOLEAN(3),
		NNG_UNIT_MILLIS(4),
		NNG_UNIT_EVENTS(5);
		nng_unit_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_unit_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_unit_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * of the other options are available.<br>
	 * enum values<br>
	 * <i>native declaration : nng.h:639</i>
	 */
	public enum nng_errno_enum implements IntValuedEnum<nng_errno_enum > {
		NNG_EINTR(1),
		NNG_ENOMEM(2),
		NNG_EINVAL(3),
		NNG_EBUSY(4),
		NNG_ETIMEDOUT(5),
		NNG_ECONNREFUSED(6),
		NNG_ECLOSED(7),
		NNG_EAGAIN(8),
		NNG_ENOTSUP(9),
		NNG_EADDRINUSE(10),
		NNG_ESTATE(11),
		NNG_ENOENT(12),
		NNG_EPROTO(13),
		NNG_EUNREACHABLE(14),
		NNG_EADDRINVAL(15),
		NNG_EPERM(16),
		NNG_EMSGSIZE(17),
		NNG_ECONNABORTED(18),
		NNG_ECONNRESET(19),
		NNG_ECANCELED(20),
		NNG_ENOFILES(21),
		NNG_ENOSPC(22),
		NNG_EEXIST(23),
		NNG_EREADONLY(24),
		NNG_EWRITEONLY(25),
		NNG_ECRYPTO(26),
		NNG_EPEERAUTH(27),
		NNG_ENOARG(28),
		NNG_EAMBIGUOUS(29),
		NNG_EBADTYPE(30),
		NNG_EINTERNAL(1000),
		NNG_ESYSERR(0x10000000),
		NNG_ETRANERR(0x20000000);
		nng_errno_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<nng_errno_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<nng_errno_enum > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_MAJOR_VERSION = (int)1;
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_MINOR_VERSION = (int)0;
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_PATCH_VERSION = (int)1;
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_RELEASE_SUFFIX = (String)"";
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_MAXADDRLEN = (int)(128);
	/**
	 * define<br>
	 * Conversion Error : { 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : nng.h:0</i><br>
	 * { 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : nng.h:0</i><br>
	 * { 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : nng.h:0</i><br>
	 * { 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : nng.h:0</i><br>
	 * { 0 }
	 */
	/**
	 * define<br>
	 * Conversion Error : { 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : nng.h:0</i><br>
	 * { 0 }
	 */
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_DURATION_INFINITE = (int)(-1);
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_DURATION_DEFAULT = (int)(-2);
	/** <i>native declaration : nng.h</i> */
	public static final int NNG_DURATION_ZERO = (int)(0);
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_SOCKNAME = (String)"socket-name";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RAW = (String)"raw";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_PROTO = (String)"protocol";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_PROTONAME = (String)"protocol-name";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_PEER = (String)"peer";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_PEERNAME = (String)"peer-name";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECVBUF = (String)"recv-buffer";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_SENDBUF = (String)"send-buffer";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECVFD = (String)"recv-fd";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_SENDFD = (String)"send-fd";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECVTIMEO = (String)"recv-timeout";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_SENDTIMEO = (String)"send-timeout";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_LOCADDR = (String)"local-address";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_REMADDR = (String)"remote-address";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_URL = (String)"url";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_MAXTTL = (String)"ttl-max";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECVMAXSZ = (String)"recv-size-max";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECONNMINT = (String)"reconnect-time-min";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_RECONNMAXT = (String)"reconnect-time-max";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_CONFIG = (String)"tls-config";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_AUTH_MODE = (String)"tls-authmode";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_CERT_KEY_FILE = (String)"tls-cert-key-file";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_CA_FILE = (String)"tls-ca-file";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_SERVER_NAME = (String)"tls-server-name";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TLS_VERIFIED = (String)"tls-verified";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TCP_NODELAY = (String)"tcp-nodelay";
	/** <i>native declaration : nng.h</i> */
	public static final String NNG_OPT_TCP_KEEPALIVE = (String)"tcp-keepalive";
	/** <i>native declaration : nng.h:141</i> */
	public static abstract class nng_pipe_cb extends Callback<nng_pipe_cb > {
		public void apply(nng_pipe_s nng_pipe1, int int1, Pointer<? > voidPtr1) {
			apply(nng_pipe1, int1, Pointer.getPeer(voidPtr1));
		}
		public void apply(nng_pipe_s nng_pipe1, int int1, @Ptr long voidPtr1) {
			apply(nng_pipe1, int1, Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : nng.h:683</i> */
	public static abstract class NngAioAllocArg1Callback extends Callback<NngAioAllocArg1Callback > {
		public void apply(Pointer<? > voidPtr1) {
			apply(Pointer.getPeer(voidPtr1));
		}
		public void apply(@Ptr long voidPtr1) {
			apply(Pointer.pointerToAddress(voidPtr1));
		}
	};
	/**
	 * as memory leaks.  In those cases, we recommend doing this with atexit().<br>
	 * Original signature : <code>void nng_fini()</code><br>
	 * <i>native declaration : nng.h:82</i>
	 */
	@Name("nng_fini") 
	public static native void nngFini();
	/**
	 * resources.<br>
	 * Original signature : <code>int nng_close(nng_socket)</code><br>
	 * <i>native declaration : nng.h:87</i>
	 */
	@Name("nng_close") 
	public static native int nngClose(nng_socket_s nng_socket1);
	/**
	 * if the socket is not valid.<br>
	 * Original signature : <code>int nng_socket_id(nng_socket)</code><br>
	 * <i>native declaration : nng.h:92</i>
	 */
	@Name("nng_socket_id") 
	public static native int nngSocketId(nng_socket_s nng_socket1);
	/**
	 * a library; it will affect all sockets.<br>
	 * Original signature : <code>void nng_closeall()</code><br>
	 * <i>native declaration : nng.h:97</i>
	 */
	@Name("nng_closeall") 
	public static native void nngCloseall();
	/**
	 * nng_setopt sets an option for a specific socket.<br>
	 * Original signature : <code>int nng_setopt(nng_socket, const char*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:102</i>
	 */
	@Name("nng_setopt") 
	public static int nngSetopt(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngSetopt(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_setopt") 
	protected native static int nngSetopt(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_setopt_bool(nng_socket, const char*, bool)</code><br>
	 * <i>native declaration : nng.h:104</i>
	 */
	@Name("nng_setopt_bool") 
	public static int nngSetoptBool(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, boolean bool1) {
		return nngSetoptBool(nng_socket1, Pointer.getPeer(charPtr1), bool1);
	}
	@Name("nng_setopt_bool") 
	protected native static int nngSetoptBool(nng_socket_s nng_socket1, @Ptr long charPtr1, boolean bool1);
	/**
	 * Original signature : <code>int nng_setopt_int(nng_socket, const char*, int)</code><br>
	 * <i>native declaration : nng.h:106</i>
	 */
	@Name("nng_setopt_int") 
	public static int nngSetoptInt(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, int int1) {
		return nngSetoptInt(nng_socket1, Pointer.getPeer(charPtr1), int1);
	}
	@Name("nng_setopt_int") 
	protected native static int nngSetoptInt(nng_socket_s nng_socket1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int nng_setopt_ms(nng_socket, const char*, nng_duration)</code><br>
	 * <i>native declaration : nng.h:108</i>
	 */
	@Name("nng_setopt_ms") 
	public static int nngSetoptMs(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, int nng_duration1) {
		return nngSetoptMs(nng_socket1, Pointer.getPeer(charPtr1), nng_duration1);
	}
	@Name("nng_setopt_ms") 
	protected native static int nngSetoptMs(nng_socket_s nng_socket1, @Ptr long charPtr1, int nng_duration1);
	/**
	 * Original signature : <code>int nng_setopt_size(nng_socket, const char*, size_t)</code><br>
	 * <i>native declaration : nng.h:110</i>
	 */
	@Name("nng_setopt_size") 
	public static int nngSetoptSize(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, long size_t1) {
		return nngSetoptSize(nng_socket1, Pointer.getPeer(charPtr1), size_t1);
	}
	@Name("nng_setopt_size") 
	protected native static int nngSetoptSize(nng_socket_s nng_socket1, @Ptr long charPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_setopt_uint64(nng_socket, const char*, uint64_t)</code><br>
	 * <i>native declaration : nng.h:112</i>
	 */
	@Name("nng_setopt_uint64") 
	public static int nngSetoptUint64(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, long uint64_t1) {
		return nngSetoptUint64(nng_socket1, Pointer.getPeer(charPtr1), uint64_t1);
	}
	@Name("nng_setopt_uint64") 
	protected native static int nngSetoptUint64(nng_socket_s nng_socket1, @Ptr long charPtr1, long uint64_t1);
	/**
	 * Original signature : <code>int nng_setopt_string(nng_socket, const char*, const char*)</code><br>
	 * <i>native declaration : nng.h:114</i>
	 */
	@Name("nng_setopt_string") 
	public static int nngSetoptString(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngSetoptString(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_setopt_string") 
	protected native static int nngSetoptString(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * Original signature : <code>int nng_setopt_ptr(nng_socket, const char*, void*)</code><br>
	 * <i>native declaration : nng.h:116</i>
	 */
	@Name("nng_setopt_ptr") 
	public static int nngSetoptPtr(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1) {
		return nngSetoptPtr(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1));
	}
	@Name("nng_setopt_ptr") 
	protected native static int nngSetoptPtr(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long voidPtr1);
	/**
	 * nng_socket_getopt obtains the option for a socket.<br>
	 * Original signature : <code>int nng_getopt(nng_socket, const char*, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:121</i>
	 */
	@Name("nng_getopt") 
	public static int nngGetopt(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngGetopt(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_getopt") 
	protected native static int nngGetopt(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_getopt_bool(nng_socket, const char*, bool*)</code><br>
	 * <i>native declaration : nng.h:123</i>
	 */
	@Name("nng_getopt_bool") 
	public static int nngGetoptBool(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Boolean > boolPtr1) {
		return nngGetoptBool(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(boolPtr1));
	}
	@Name("nng_getopt_bool") 
	protected native static int nngGetoptBool(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long boolPtr1);
	/**
	 * Original signature : <code>int nng_getopt_int(nng_socket, const char*, int*)</code><br>
	 * <i>native declaration : nng.h:125</i>
	 */
	@Name("nng_getopt_int") 
	public static int nngGetoptInt(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Integer > intPtr1) {
		return nngGetoptInt(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(intPtr1));
	}
	@Name("nng_getopt_int") 
	protected native static int nngGetoptInt(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int nng_getopt_ms(nng_socket, const char*, nng_duration*)</code><br>
	 * <i>native declaration : nng.h:127</i>
	 */
	@Name("nng_getopt_ms") 
	public static int nngGetoptMs(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Integer > nng_durationPtr1) {
		return nngGetoptMs(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_durationPtr1));
	}
	@Name("nng_getopt_ms") 
	protected native static int nngGetoptMs(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long nng_durationPtr1);
	/**
	 * Original signature : <code>int nng_getopt_size(nng_socket, const char*, size_t*)</code><br>
	 * <i>native declaration : nng.h:129</i>
	 */
	@Name("nng_getopt_size") 
	public static int nngGetoptSize(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Long > size_tPtr1) {
		return nngGetoptSize(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_getopt_size") 
	protected native static int nngGetoptSize(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_getopt_uint64(nng_socket, const char*, uint64_t*)</code><br>
	 * <i>native declaration : nng.h:131</i>
	 */
	@Name("nng_getopt_uint64") 
	public static int nngGetoptUint64(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Long > uint64_tPtr1) {
		return nngGetoptUint64(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(uint64_tPtr1));
	}
	@Name("nng_getopt_uint64") 
	protected native static int nngGetoptUint64(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long uint64_tPtr1);
	/**
	 * Original signature : <code>int nng_getopt_ptr(nng_socket, const char*, void**)</code><br>
	 * <i>native declaration : nng.h:133</i>
	 */
	@Name("nng_getopt_ptr") 
	public static int nngGetoptPtr(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Pointer<? > > voidPtrPtr1) {
		return nngGetoptPtr(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtrPtr1));
	}
	@Name("nng_getopt_ptr") 
	protected native static int nngGetoptPtr(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long voidPtrPtr1);
	/**
	 * multiple times.  Each event can have at most one callback registered.<br>
	 * Original signature : <code>int nng_pipe_notify(nng_socket, int, nng_pipe_cb, void*)</code><br>
	 * <i>native declaration : nng.h:146</i>
	 */
	@Name("nng_pipe_notify") 
	public static int nngPipeNotify(nng_socket_s nng_socket1, int int1, Pointer<NngLibrary.nng_pipe_cb > nng_pipe_cb1, Pointer<? > voidPtr1) {
		return nngPipeNotify(nng_socket1, int1, Pointer.getPeer(nng_pipe_cb1), Pointer.getPeer(voidPtr1));
	}
	@Name("nng_pipe_notify") 
	protected native static int nngPipeNotify(nng_socket_s nng_socket1, int int1, @Ptr long nng_pipe_cb1, @Ptr long voidPtr1);
	/**
	 * no logner needed.<br>
	 * Original signature : <code>int nng_getopt_string(nng_socket, const char*, char**)</code><br>
	 * <i>native declaration : nng.h:151</i>
	 */
	@Name("nng_getopt_string") 
	public static int nngGetoptString(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1) {
		return nngGetoptString(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtrPtr1));
	}
	@Name("nng_getopt_string") 
	protected native static int nngGetoptString(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long charPtrPtr1);
	/**
	 * back to the caller immediately.<br>
	 * Original signature : <code>int nng_listen(nng_socket, const char*, nng_listener*, int)</code><br>
	 * <i>native declaration : nng.h:156</i>
	 */
	@Name("nng_listen") 
	public static int nngListen(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<nng_listener_s > nng_listenerPtr1, int int1) {
		return nngListen(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_listenerPtr1), int1);
	}
	@Name("nng_listen") 
	protected native static int nngListen(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long nng_listenerPtr1, int int1);
	/**
	 * reconnected in the background -- only the initial connect is synchronous.)<br>
	 * Original signature : <code>int nng_dial(nng_socket, const char*, nng_dialer*, int)</code><br>
	 * <i>native declaration : nng.h:161</i>
	 */
	@Name("nng_dial") 
	public static int nngDial(nng_socket_s nng_socket1, Pointer<Byte > charPtr1, Pointer<nng_dialer_s > nng_dialerPtr1, int int1) {
		return nngDial(nng_socket1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_dialerPtr1), int1);
	}
	@Name("nng_dial") 
	protected native static int nngDial(nng_socket_s nng_socket1, @Ptr long charPtr1, @Ptr long nng_dialerPtr1, int int1);
	/**
	 * nng_dialer_create creates a new dialer, that is not yet started.<br>
	 * Original signature : <code>int nng_dialer_create(nng_dialer*, nng_socket, const char*)</code><br>
	 * <i>native declaration : nng.h:166</i>
	 */
	@Name("nng_dialer_create") 
	public static int nngDialerCreate(Pointer<nng_dialer_s > nng_dialerPtr1, nng_socket_s nng_socket1, Pointer<Byte > charPtr1) {
		return nngDialerCreate(Pointer.getPeer(nng_dialerPtr1), nng_socket1, Pointer.getPeer(charPtr1));
	}
	@Name("nng_dialer_create") 
	protected native static int nngDialerCreate(@Ptr long nng_dialerPtr1, nng_socket_s nng_socket1, @Ptr long charPtr1);
	/**
	 * nng_listener_create creates a new listener, that is not yet started.<br>
	 * Original signature : <code>int nng_listener_create(nng_listener*, nng_socket, const char*)</code><br>
	 * <i>native declaration : nng.h:171</i>
	 */
	@Name("nng_listener_create") 
	public static int nngListenerCreate(Pointer<nng_listener_s > nng_listenerPtr1, nng_socket_s nng_socket1, Pointer<Byte > charPtr1) {
		return nngListenerCreate(Pointer.getPeer(nng_listenerPtr1), nng_socket1, Pointer.getPeer(charPtr1));
	}
	@Name("nng_listener_create") 
	protected native static int nngListenerCreate(@Ptr long nng_listenerPtr1, nng_socket_s nng_socket1, @Ptr long charPtr1);
	/**
	 * the dialer is not already dialing.<br>
	 * Original signature : <code>int nng_dialer_start(nng_dialer, int)</code><br>
	 * <i>native declaration : nng.h:176</i>
	 */
	@Name("nng_dialer_start") 
	public static native int nngDialerStart(nng_dialer_s nng_dialer1, int int1);
	/**
	 * the listener is not already listening.<br>
	 * Original signature : <code>int nng_listener_start(nng_listener, int)</code><br>
	 * <i>native declaration : nng.h:181</i>
	 */
	@Name("nng_listener_start") 
	public static native int nngListenerStart(nng_listener_s nng_listener1, int int1);
	/**
	 * connections and releasing all associated resources.<br>
	 * Original signature : <code>int nng_dialer_close(nng_dialer)</code><br>
	 * <i>native declaration : nng.h:186</i>
	 */
	@Name("nng_dialer_close") 
	public static native int nngDialerClose(nng_dialer_s nng_dialer1);
	/**
	 * connections and releasing all associated resources.<br>
	 * Original signature : <code>int nng_listener_close(nng_listener)</code><br>
	 * <i>native declaration : nng.h:191</i>
	 */
	@Name("nng_listener_close") 
	public static native int nngListenerClose(nng_listener_s nng_listener1);
	/**
	 * invalid.<br>
	 * Original signature : <code>int nng_dialer_id(nng_dialer)</code><br>
	 * <i>native declaration : nng.h:196</i>
	 */
	@Name("nng_dialer_id") 
	public static native int nngDialerId(nng_dialer_s nng_dialer1);
	/**
	 * invalid.<br>
	 * Original signature : <code>int nng_listener_id(nng_listener)</code><br>
	 * <i>native declaration : nng.h:201</i>
	 */
	@Name("nng_listener_id") 
	public static native int nngListenerId(nng_listener_s nng_listener1);
	/**
	 * dialer options may not be altered on a running dialer.<br>
	 * Original signature : <code>int nng_dialer_setopt(nng_dialer, const char*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:206</i>
	 */
	@Name("nng_dialer_setopt") 
	public static int nngDialerSetopt(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngDialerSetopt(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_dialer_setopt") 
	protected native static int nngDialerSetopt(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_bool(nng_dialer, const char*, bool)</code><br>
	 * <i>native declaration : nng.h:208</i>
	 */
	@Name("nng_dialer_setopt_bool") 
	public static int nngDialerSetoptBool(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, boolean bool1) {
		return nngDialerSetoptBool(nng_dialer1, Pointer.getPeer(charPtr1), bool1);
	}
	@Name("nng_dialer_setopt_bool") 
	protected native static int nngDialerSetoptBool(nng_dialer_s nng_dialer1, @Ptr long charPtr1, boolean bool1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_int(nng_dialer, const char*, int)</code><br>
	 * <i>native declaration : nng.h:210</i>
	 */
	@Name("nng_dialer_setopt_int") 
	public static int nngDialerSetoptInt(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, int int1) {
		return nngDialerSetoptInt(nng_dialer1, Pointer.getPeer(charPtr1), int1);
	}
	@Name("nng_dialer_setopt_int") 
	protected native static int nngDialerSetoptInt(nng_dialer_s nng_dialer1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_ms(nng_dialer, const char*, nng_duration)</code><br>
	 * <i>native declaration : nng.h:212</i>
	 */
	@Name("nng_dialer_setopt_ms") 
	public static int nngDialerSetoptMs(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, int nng_duration1) {
		return nngDialerSetoptMs(nng_dialer1, Pointer.getPeer(charPtr1), nng_duration1);
	}
	@Name("nng_dialer_setopt_ms") 
	protected native static int nngDialerSetoptMs(nng_dialer_s nng_dialer1, @Ptr long charPtr1, int nng_duration1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_size(nng_dialer, const char*, size_t)</code><br>
	 * <i>native declaration : nng.h:214</i>
	 */
	@Name("nng_dialer_setopt_size") 
	public static int nngDialerSetoptSize(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, long size_t1) {
		return nngDialerSetoptSize(nng_dialer1, Pointer.getPeer(charPtr1), size_t1);
	}
	@Name("nng_dialer_setopt_size") 
	protected native static int nngDialerSetoptSize(nng_dialer_s nng_dialer1, @Ptr long charPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_uint64(nng_dialer, const char*, uint64_t)</code><br>
	 * <i>native declaration : nng.h:216</i>
	 */
	@Name("nng_dialer_setopt_uint64") 
	public static int nngDialerSetoptUint64(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, long uint64_t1) {
		return nngDialerSetoptUint64(nng_dialer1, Pointer.getPeer(charPtr1), uint64_t1);
	}
	@Name("nng_dialer_setopt_uint64") 
	protected native static int nngDialerSetoptUint64(nng_dialer_s nng_dialer1, @Ptr long charPtr1, long uint64_t1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_ptr(nng_dialer, const char*, void*)</code><br>
	 * <i>native declaration : nng.h:218</i>
	 */
	@Name("nng_dialer_setopt_ptr") 
	public static int nngDialerSetoptPtr(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1) {
		return nngDialerSetoptPtr(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1));
	}
	@Name("nng_dialer_setopt_ptr") 
	protected native static int nngDialerSetoptPtr(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int nng_dialer_setopt_string(nng_dialer, const char*, const char*)</code><br>
	 * <i>native declaration : nng.h:220</i>
	 */
	@Name("nng_dialer_setopt_string") 
	public static int nngDialerSetoptString(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngDialerSetoptString(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_dialer_setopt_string") 
	protected native static int nngDialerSetoptString(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * even if they were set on the socket.<br>
	 * Original signature : <code>int nng_dialer_getopt(nng_dialer, const char*, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:225</i>
	 */
	@Name("nng_dialer_getopt") 
	public static int nngDialerGetopt(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngDialerGetopt(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_dialer_getopt") 
	protected native static int nngDialerGetopt(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_bool(nng_dialer, const char*, bool*)</code><br>
	 * <i>native declaration : nng.h:227</i>
	 */
	@Name("nng_dialer_getopt_bool") 
	public static int nngDialerGetoptBool(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Boolean > boolPtr1) {
		return nngDialerGetoptBool(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(boolPtr1));
	}
	@Name("nng_dialer_getopt_bool") 
	protected native static int nngDialerGetoptBool(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long boolPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_int(nng_dialer, const char*, int*)</code><br>
	 * <i>native declaration : nng.h:229</i>
	 */
	@Name("nng_dialer_getopt_int") 
	public static int nngDialerGetoptInt(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Integer > intPtr1) {
		return nngDialerGetoptInt(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(intPtr1));
	}
	@Name("nng_dialer_getopt_int") 
	protected native static int nngDialerGetoptInt(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_ms(nng_dialer, const char*, nng_duration*)</code><br>
	 * <i>native declaration : nng.h:231</i>
	 */
	@Name("nng_dialer_getopt_ms") 
	public static int nngDialerGetoptMs(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Integer > nng_durationPtr1) {
		return nngDialerGetoptMs(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_durationPtr1));
	}
	@Name("nng_dialer_getopt_ms") 
	protected native static int nngDialerGetoptMs(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long nng_durationPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_size(nng_dialer, const char*, size_t*)</code><br>
	 * <i>native declaration : nng.h:233</i>
	 */
	@Name("nng_dialer_getopt_size") 
	public static int nngDialerGetoptSize(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Long > size_tPtr1) {
		return nngDialerGetoptSize(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_dialer_getopt_size") 
	protected native static int nngDialerGetoptSize(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_sockaddr(nng_dialer, const char*, nng_sockaddr*)</code><br>
	 * <i>native declaration : nng.h:235</i>
	 */
	@Name("nng_dialer_getopt_sockaddr") 
	public static int nngDialerGetoptSockaddr(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<nng_sockaddr > nng_sockaddrPtr1) {
		return nngDialerGetoptSockaddr(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_sockaddrPtr1));
	}
	@Name("nng_dialer_getopt_sockaddr") 
	protected native static int nngDialerGetoptSockaddr(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long nng_sockaddrPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_uint64(nng_dialer, const char*, uint64_t*)</code><br>
	 * <i>native declaration : nng.h:237</i>
	 */
	@Name("nng_dialer_getopt_uint64") 
	public static int nngDialerGetoptUint64(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Long > uint64_tPtr1) {
		return nngDialerGetoptUint64(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(uint64_tPtr1));
	}
	@Name("nng_dialer_getopt_uint64") 
	protected native static int nngDialerGetoptUint64(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long uint64_tPtr1);
	/**
	 * Original signature : <code>int nng_dialer_getopt_ptr(nng_dialer, const char*, void**)</code><br>
	 * <i>native declaration : nng.h:239</i>
	 */
	@Name("nng_dialer_getopt_ptr") 
	public static int nngDialerGetoptPtr(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Pointer<? > > voidPtrPtr1) {
		return nngDialerGetoptPtr(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtrPtr1));
	}
	@Name("nng_dialer_getopt_ptr") 
	protected native static int nngDialerGetoptPtr(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long voidPtrPtr1);
	/**
	 * no logner needed.<br>
	 * Original signature : <code>int nng_dialer_getopt_string(nng_dialer, const char*, char**)</code><br>
	 * <i>native declaration : nng.h:244</i>
	 */
	@Name("nng_dialer_getopt_string") 
	public static int nngDialerGetoptString(nng_dialer_s nng_dialer1, Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1) {
		return nngDialerGetoptString(nng_dialer1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtrPtr1));
	}
	@Name("nng_dialer_getopt_string") 
	protected native static int nngDialerGetoptString(nng_dialer_s nng_dialer1, @Ptr long charPtr1, @Ptr long charPtrPtr1);
	/**
	 * on a running listener.<br>
	 * Original signature : <code>int nng_listener_setopt(nng_listener, const char*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:249</i>
	 */
	@Name("nng_listener_setopt") 
	public static int nngListenerSetopt(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngListenerSetopt(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_listener_setopt") 
	protected native static int nngListenerSetopt(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_listener_setopt_bool(nng_listener, const char*, bool)</code><br>
	 * <i>native declaration : nng.h:251</i>
	 */
	@Name("nng_listener_setopt_bool") 
	public static int nngListenerSetoptBool(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, boolean bool1) {
		return nngListenerSetoptBool(nng_listener1, Pointer.getPeer(charPtr1), bool1);
	}
	@Name("nng_listener_setopt_bool") 
	protected native static int nngListenerSetoptBool(nng_listener_s nng_listener1, @Ptr long charPtr1, boolean bool1);
	/**
	 * Original signature : <code>int nng_listener_setopt_int(nng_listener, const char*, int)</code><br>
	 * <i>native declaration : nng.h:253</i>
	 */
	@Name("nng_listener_setopt_int") 
	public static int nngListenerSetoptInt(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, int int1) {
		return nngListenerSetoptInt(nng_listener1, Pointer.getPeer(charPtr1), int1);
	}
	@Name("nng_listener_setopt_int") 
	protected native static int nngListenerSetoptInt(nng_listener_s nng_listener1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int nng_listener_setopt_ms(nng_listener, const char*, nng_duration)</code><br>
	 * <i>native declaration : nng.h:255</i>
	 */
	@Name("nng_listener_setopt_ms") 
	public static int nngListenerSetoptMs(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, int nng_duration1) {
		return nngListenerSetoptMs(nng_listener1, Pointer.getPeer(charPtr1), nng_duration1);
	}
	@Name("nng_listener_setopt_ms") 
	protected native static int nngListenerSetoptMs(nng_listener_s nng_listener1, @Ptr long charPtr1, int nng_duration1);
	/**
	 * Original signature : <code>int nng_listener_setopt_size(nng_listener, const char*, size_t)</code><br>
	 * <i>native declaration : nng.h:257</i>
	 */
	@Name("nng_listener_setopt_size") 
	public static int nngListenerSetoptSize(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, long size_t1) {
		return nngListenerSetoptSize(nng_listener1, Pointer.getPeer(charPtr1), size_t1);
	}
	@Name("nng_listener_setopt_size") 
	protected native static int nngListenerSetoptSize(nng_listener_s nng_listener1, @Ptr long charPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_listener_setopt_uint64(nng_listener, const char*, uint64_t)</code><br>
	 * <i>native declaration : nng.h:259</i>
	 */
	@Name("nng_listener_setopt_uint64") 
	public static int nngListenerSetoptUint64(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, long uint64_t1) {
		return nngListenerSetoptUint64(nng_listener1, Pointer.getPeer(charPtr1), uint64_t1);
	}
	@Name("nng_listener_setopt_uint64") 
	protected native static int nngListenerSetoptUint64(nng_listener_s nng_listener1, @Ptr long charPtr1, long uint64_t1);
	/**
	 * Original signature : <code>int nng_listener_setopt_ptr(nng_listener, const char*, void*)</code><br>
	 * <i>native declaration : nng.h:261</i>
	 */
	@Name("nng_listener_setopt_ptr") 
	public static int nngListenerSetoptPtr(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1) {
		return nngListenerSetoptPtr(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1));
	}
	@Name("nng_listener_setopt_ptr") 
	protected native static int nngListenerSetoptPtr(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int nng_listener_setopt_string(nng_listener, const char*, const char*)</code><br>
	 * <i>native declaration : nng.h:263</i>
	 */
	@Name("nng_listener_setopt_string") 
	public static int nngListenerSetoptString(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nngListenerSetoptString(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nng_listener_setopt_string") 
	protected native static int nngListenerSetoptString(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * even if they were set on the socket.<br>
	 * Original signature : <code>int nng_listener_getopt(nng_listener, const char*, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:268</i>
	 */
	@Name("nng_listener_getopt") 
	public static int nngListenerGetopt(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngListenerGetopt(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_listener_getopt") 
	protected native static int nngListenerGetopt(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_bool(nng_listener, const char*, bool*)</code><br>
	 * <i>native declaration : nng.h:270</i>
	 */
	@Name("nng_listener_getopt_bool") 
	public static int nngListenerGetoptBool(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Boolean > boolPtr1) {
		return nngListenerGetoptBool(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(boolPtr1));
	}
	@Name("nng_listener_getopt_bool") 
	protected native static int nngListenerGetoptBool(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long boolPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_int(nng_listener, const char*, int*)</code><br>
	 * <i>native declaration : nng.h:272</i>
	 */
	@Name("nng_listener_getopt_int") 
	public static int nngListenerGetoptInt(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Integer > intPtr1) {
		return nngListenerGetoptInt(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(intPtr1));
	}
	@Name("nng_listener_getopt_int") 
	protected native static int nngListenerGetoptInt(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_ms(nng_listener, const char*, nng_duration*)</code><br>
	 * <i>native declaration : nng.h:274</i>
	 */
	@Name("nng_listener_getopt_ms") 
	public static int nngListenerGetoptMs(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Integer > nng_durationPtr1) {
		return nngListenerGetoptMs(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_durationPtr1));
	}
	@Name("nng_listener_getopt_ms") 
	protected native static int nngListenerGetoptMs(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long nng_durationPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_size(nng_listener, const char*, size_t*)</code><br>
	 * <i>native declaration : nng.h:276</i>
	 */
	@Name("nng_listener_getopt_size") 
	public static int nngListenerGetoptSize(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Long > size_tPtr1) {
		return nngListenerGetoptSize(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_listener_getopt_size") 
	protected native static int nngListenerGetoptSize(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_sockaddr(nng_listener, const char*, nng_sockaddr*)</code><br>
	 * <i>native declaration : nng.h:278</i>
	 */
	@Name("nng_listener_getopt_sockaddr") 
	public static int nngListenerGetoptSockaddr(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<nng_sockaddr > nng_sockaddrPtr1) {
		return nngListenerGetoptSockaddr(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_sockaddrPtr1));
	}
	@Name("nng_listener_getopt_sockaddr") 
	protected native static int nngListenerGetoptSockaddr(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long nng_sockaddrPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_uint64(nng_listener, const char*, uint64_t*)</code><br>
	 * <i>native declaration : nng.h:280</i>
	 */
	@Name("nng_listener_getopt_uint64") 
	public static int nngListenerGetoptUint64(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Long > uint64_tPtr1) {
		return nngListenerGetoptUint64(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(uint64_tPtr1));
	}
	@Name("nng_listener_getopt_uint64") 
	protected native static int nngListenerGetoptUint64(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long uint64_tPtr1);
	/**
	 * Original signature : <code>int nng_listener_getopt_ptr(nng_listener, const char*, void**)</code><br>
	 * <i>native declaration : nng.h:282</i>
	 */
	@Name("nng_listener_getopt_ptr") 
	public static int nngListenerGetoptPtr(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Pointer<? > > voidPtrPtr1) {
		return nngListenerGetoptPtr(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtrPtr1));
	}
	@Name("nng_listener_getopt_ptr") 
	protected native static int nngListenerGetoptPtr(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long voidPtrPtr1);
	/**
	 * no logner needed.<br>
	 * Original signature : <code>int nng_listener_getopt_string(nng_listener, const char*, char**)</code><br>
	 * <i>native declaration : nng.h:287</i>
	 */
	@Name("nng_listener_getopt_string") 
	public static int nngListenerGetoptString(nng_listener_s nng_listener1, Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1) {
		return nngListenerGetoptString(nng_listener1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtrPtr1));
	}
	@Name("nng_listener_getopt_string") 
	protected native static int nngListenerGetoptString(nng_listener_s nng_listener1, @Ptr long charPtr1, @Ptr long charPtrPtr1);
	/**
	 * code supplied.<br>
	 * Original signature : <code>char* nng_strerror(int)</code><br>
	 * <i>native declaration : nng.h:292</i>
	 */
	@Name("nng_strerror") 
	public static Pointer<Byte > nngStrerror(int int1) {
		return (Pointer)Pointer.pointerToAddress(nngStrerror$2(int1), Byte.class);
	}
	@Name("nng_strerror") 
	@Ptr 
	protected native static long nngStrerror$2(int int1);
	/**
	 * fails then the memory is not freed.)<br>
	 * Original signature : <code>int nng_send(nng_socket, void*, size_t, int)</code><br>
	 * <i>native declaration : nng.h:297</i>
	 */
	@Name("nng_send") 
	public static int nngSend(nng_socket_s nng_socket1, Pointer<? > voidPtr1, long size_t1, int int1) {
		return nngSend(nng_socket1, Pointer.getPeer(voidPtr1), size_t1, int1);
	}
	@Name("nng_send") 
	protected native static int nngSend(nng_socket_s nng_socket1, @Ptr long voidPtr1, long size_t1, int int1);
	/**
	 * associated memory with nng_free().<br>
	 * Original signature : <code>int nng_recv(nng_socket, void*, size_t*, int)</code><br>
	 * <i>native declaration : nng.h:302</i>
	 */
	@Name("nng_recv") 
	public static int nngRecv(nng_socket_s nng_socket1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1, int int1) {
		return nngRecv(nng_socket1, Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1), int1);
	}
	@Name("nng_recv") 
	protected native static int nngRecv(nng_socket_s nng_socket1, @Ptr long voidPtr1, @Ptr long size_tPtr1, int int1);
	/**
	 * obtain via nn_recvmsg, allowing for zero copy forwarding.<br>
	 * Original signature : <code>int nng_sendmsg(nng_socket, nng_msg*, int)</code><br>
	 * <i>native declaration : nng.h:307</i>
	 */
	@Name("nng_sendmsg") 
	public static int nngSendmsg(nng_socket_s nng_socket1, Pointer<NngLibrary.nng_msg > nng_msgPtr1, int int1) {
		return nngSendmsg(nng_socket1, Pointer.getPeer(nng_msgPtr1), int1);
	}
	@Name("nng_sendmsg") 
	protected native static int nngSendmsg(nng_socket_s nng_socket1, @Ptr long nng_msgPtr1, int int1);
	/**
	 * can be passed off directly to nng_sendmsg.<br>
	 * Original signature : <code>int nng_recvmsg(nng_socket, nng_msg**, int)</code><br>
	 * <i>native declaration : nng.h:312</i>
	 */
	@Name("nng_recvmsg") 
	public static int nngRecvmsg(nng_socket_s nng_socket1, Pointer<Pointer<NngLibrary.nng_msg > > nng_msgPtrPtr1, int int1) {
		return nngRecvmsg(nng_socket1, Pointer.getPeer(nng_msgPtrPtr1), int1);
	}
	@Name("nng_recvmsg") 
	protected native static int nngRecvmsg(nng_socket_s nng_socket1, @Ptr long nng_msgPtrPtr1, int int1);
	/**
	 * the caller is responsible for freeing it.<br>
	 * Original signature : <code>void nng_send_aio(nng_socket, nng_aio*)</code><br>
	 * <i>native declaration : nng.h:317</i>
	 */
	@Name("nng_send_aio") 
	public static void nngSendAio(nng_socket_s nng_socket1, Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngSendAio(nng_socket1, Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_send_aio") 
	protected native static void nngSendAio(nng_socket_s nng_socket1, @Ptr long nng_aioPtr1);
	/**
	 * this point.<br>
	 * Original signature : <code>void nng_recv_aio(nng_socket, nng_aio*)</code><br>
	 * <i>native declaration : nng.h:322</i>
	 */
	@Name("nng_recv_aio") 
	public static void nngRecvAio(nng_socket_s nng_socket1, Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngRecvAio(nng_socket1, Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_recv_aio") 
	protected native static void nngRecvAio(nng_socket_s nng_socket1, @Ptr long nng_aioPtr1);
	/**
	 * protocol implementation does not support separate contexts.<br>
	 * Original signature : <code>int nng_ctx_open(nng_ctx*, nng_socket)</code><br>
	 * <i>native declaration : nng.h:327</i>
	 */
	@Name("nng_ctx_open") 
	public static int nngCtxOpen(Pointer<nng_ctx_s > nng_ctxPtr1, nng_socket_s nng_socket1) {
		return nngCtxOpen(Pointer.getPeer(nng_ctxPtr1), nng_socket1);
	}
	@Name("nng_ctx_open") 
	protected native static int nngCtxOpen(@Ptr long nng_ctxPtr1, nng_socket_s nng_socket1);
	/**
	 * nng_ctx_close closes the context.<br>
	 * Original signature : <code>int nng_ctx_close(nng_ctx)</code><br>
	 * <i>native declaration : nng.h:332</i>
	 */
	@Name("nng_ctx_close") 
	public static native int nngCtxClose(nng_ctx_s nng_ctx1);
	/**
	 * A valid context is not necessarily an *open* context.<br>
	 * Original signature : <code>int nng_ctx_id(nng_ctx)</code><br>
	 * <i>native declaration : nng.h:337</i>
	 */
	@Name("nng_ctx_id") 
	public static native int nngCtxId(nng_ctx_s nng_ctx1);
	/**
	 * uses a local context instead of the socket global context.<br>
	 * Original signature : <code>void nng_ctx_recv(nng_ctx, nng_aio*)</code><br>
	 * <i>native declaration : nng.h:342</i>
	 */
	@Name("nng_ctx_recv") 
	public static void nngCtxRecv(nng_ctx_s nng_ctx1, Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngCtxRecv(nng_ctx1, Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_ctx_recv") 
	protected native static void nngCtxRecv(nng_ctx_s nng_ctx1, @Ptr long nng_aioPtr1);
	/**
	 * uses a local context instead of the socket global context.<br>
	 * Original signature : <code>void nng_ctx_send(nng_ctx, nng_aio*)</code><br>
	 * <i>native declaration : nng.h:347</i>
	 */
	@Name("nng_ctx_send") 
	public static void nngCtxSend(nng_ctx_s nng_ctx1, Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngCtxSend(nng_ctx1, Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_ctx_send") 
	protected native static void nngCtxSend(nng_ctx_s nng_ctx1, @Ptr long nng_aioPtr1);
	/**
	 * see the protocol documentation for more details.<br>
	 * Original signature : <code>int nng_ctx_getopt(nng_ctx, const char*, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:352</i>
	 */
	@Name("nng_ctx_getopt") 
	public static int nngCtxGetopt(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngCtxGetopt(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_ctx_getopt") 
	protected native static int nngCtxGetopt(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_ctx_getopt_bool(nng_ctx, const char*, bool*)</code><br>
	 * <i>native declaration : nng.h:354</i>
	 */
	@Name("nng_ctx_getopt_bool") 
	public static int nngCtxGetoptBool(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<Boolean > boolPtr1) {
		return nngCtxGetoptBool(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(boolPtr1));
	}
	@Name("nng_ctx_getopt_bool") 
	protected native static int nngCtxGetoptBool(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long boolPtr1);
	/**
	 * Original signature : <code>int nng_ctx_getopt_int(nng_ctx, const char*, int*)</code><br>
	 * <i>native declaration : nng.h:356</i>
	 */
	@Name("nng_ctx_getopt_int") 
	public static int nngCtxGetoptInt(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<Integer > intPtr1) {
		return nngCtxGetoptInt(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(intPtr1));
	}
	@Name("nng_ctx_getopt_int") 
	protected native static int nngCtxGetoptInt(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int nng_ctx_getopt_ms(nng_ctx, const char*, nng_duration*)</code><br>
	 * <i>native declaration : nng.h:358</i>
	 */
	@Name("nng_ctx_getopt_ms") 
	public static int nngCtxGetoptMs(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<Integer > nng_durationPtr1) {
		return nngCtxGetoptMs(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_durationPtr1));
	}
	@Name("nng_ctx_getopt_ms") 
	protected native static int nngCtxGetoptMs(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long nng_durationPtr1);
	/**
	 * Original signature : <code>int nng_ctx_getopt_size(nng_ctx, const char*, size_t*)</code><br>
	 * <i>native declaration : nng.h:360</i>
	 */
	@Name("nng_ctx_getopt_size") 
	public static int nngCtxGetoptSize(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<Long > size_tPtr1) {
		return nngCtxGetoptSize(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_ctx_getopt_size") 
	protected native static int nngCtxGetoptSize(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long size_tPtr1);
	/**
	 * see the protocol documentation for more details.<br>
	 * Original signature : <code>int nng_ctx_setopt(nng_ctx, const char*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:365</i>
	 */
	@Name("nng_ctx_setopt") 
	public static int nngCtxSetopt(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngCtxSetopt(nng_ctx1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_ctx_setopt") 
	protected native static int nngCtxSetopt(nng_ctx_s nng_ctx1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_ctx_setopt_bool(nng_ctx, const char*, bool)</code><br>
	 * <i>native declaration : nng.h:367</i>
	 */
	@Name("nng_ctx_setopt_bool") 
	public static int nngCtxSetoptBool(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, boolean bool1) {
		return nngCtxSetoptBool(nng_ctx1, Pointer.getPeer(charPtr1), bool1);
	}
	@Name("nng_ctx_setopt_bool") 
	protected native static int nngCtxSetoptBool(nng_ctx_s nng_ctx1, @Ptr long charPtr1, boolean bool1);
	/**
	 * Original signature : <code>int nng_ctx_setopt_int(nng_ctx, const char*, int)</code><br>
	 * <i>native declaration : nng.h:369</i>
	 */
	@Name("nng_ctx_setopt_int") 
	public static int nngCtxSetoptInt(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, int int1) {
		return nngCtxSetoptInt(nng_ctx1, Pointer.getPeer(charPtr1), int1);
	}
	@Name("nng_ctx_setopt_int") 
	protected native static int nngCtxSetoptInt(nng_ctx_s nng_ctx1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int nng_ctx_setopt_ms(nng_ctx, const char*, nng_duration)</code><br>
	 * <i>native declaration : nng.h:371</i>
	 */
	@Name("nng_ctx_setopt_ms") 
	public static int nngCtxSetoptMs(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, int nng_duration1) {
		return nngCtxSetoptMs(nng_ctx1, Pointer.getPeer(charPtr1), nng_duration1);
	}
	@Name("nng_ctx_setopt_ms") 
	protected native static int nngCtxSetoptMs(nng_ctx_s nng_ctx1, @Ptr long charPtr1, int nng_duration1);
	/**
	 * Original signature : <code>int nng_ctx_setopt_size(nng_ctx, const char*, size_t)</code><br>
	 * <i>native declaration : nng.h:373</i>
	 */
	@Name("nng_ctx_setopt_size") 
	public static int nngCtxSetoptSize(nng_ctx_s nng_ctx1, Pointer<Byte > charPtr1, long size_t1) {
		return nngCtxSetoptSize(nng_ctx1, Pointer.getPeer(charPtr1), size_t1);
	}
	@Name("nng_ctx_setopt_size") 
	protected native static int nngCtxSetoptSize(nng_ctx_s nng_ctx1, @Ptr long charPtr1, long size_t1);
	/**
	 * specific API.<br>
	 * Original signature : <code>void* nng_alloc(size_t)</code><br>
	 * <i>native declaration : nng.h:378</i>
	 */
	@Name("nng_alloc") 
	public static Pointer<? > nngAlloc(long size_t1) {
		return Pointer.pointerToAddress(nngAlloc$2(size_t1));
	}
	@Name("nng_alloc") 
	@Ptr 
	protected native static long nngAlloc$2(long size_t1);
	/**
	 * calloc.<br>
	 * Original signature : <code>void nng_free(void*, size_t)</code><br>
	 * <i>native declaration : nng.h:383</i>
	 */
	@Name("nng_free") 
	public static void nngFree(Pointer<? > voidPtr1, long size_t1) {
		nngFree(Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_free") 
	protected native static void nngFree(@Ptr long voidPtr1, long size_t1);
	/**
	 * should be freed with nng_strfree (or nng_free(strlen(s)+1)).<br>
	 * Original signature : <code>char* nng_strdup(const char*)</code><br>
	 * <i>native declaration : nng.h:388</i>
	 */
	@Name("nng_strdup") 
	public static Pointer<Byte > nngStrdup(Pointer<Byte > charPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngStrdup(Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Name("nng_strdup") 
	@Ptr 
	protected native static long nngStrdup(@Ptr long charPtr1);
	/**
	 * nng_strfree is equivalent to nng_free(strlen(s)+1).<br>
	 * Original signature : <code>void nng_strfree(char*)</code><br>
	 * <i>native declaration : nng.h:393</i>
	 */
	@Name("nng_strfree") 
	public static void nngStrfree(Pointer<Byte > charPtr1) {
		nngStrfree(Pointer.getPeer(charPtr1));
	}
	@Name("nng_strfree") 
	protected native static void nngStrfree(@Ptr long charPtr1);
	/**
	 * locks held.<br>
	 * Original signature : <code>int nng_aio_alloc(nng_aio**, NngAioAllocArg1Callback*, void*)</code><br>
	 * <i>native declaration : nng.h:398</i>
	 */
	@Name("nng_aio_alloc") 
	public static int nngAioAlloc(Pointer<Pointer<NngLibrary.nng_aio > > nng_aioPtrPtr1, Pointer<NngLibrary.NngAioAllocArg1Callback > arg1, Pointer<? > voidPtr1) {
		return nngAioAlloc(Pointer.getPeer(nng_aioPtrPtr1), Pointer.getPeer(arg1), Pointer.getPeer(voidPtr1));
	}
	@Name("nng_aio_alloc") 
	protected native static int nngAioAlloc(@Ptr long nng_aioPtrPtr1, @Ptr long arg1, @Ptr long voidPtr1);
	/**
	 * It *must not* be in use at the time it is freed.<br>
	 * Original signature : <code>void nng_aio_free(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:403</i>
	 */
	@Name("nng_aio_free") 
	public static void nngAioFree(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngAioFree(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_free") 
	protected native static void nngAioFree(@Ptr long nng_aioPtr1);
	/**
	 * are acquired in the callback, or deadlock will occur.<br>
	 * Original signature : <code>void nng_aio_stop(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:408</i>
	 */
	@Name("nng_aio_stop") 
	public static void nngAioStop(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngAioStop(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_stop") 
	protected native static void nngAioStop(@Ptr long nng_aioPtr1);
	/**
	 * failure.<br>
	 * Original signature : <code>int nng_aio_result(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:413</i>
	 */
	@Name("nng_aio_result") 
	public static int nngAioResult(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		return nngAioResult(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_result") 
	protected native static int nngAioResult(@Ptr long nng_aioPtr1);
	/**
	 * DNS lookups or TCP connection setup).<br>
	 * Original signature : <code>size_t nng_aio_count(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:418</i>
	 */
	@Name("nng_aio_count") 
	public static long nngAioCount(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		return nngAioCount(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_count") 
	protected native static long nngAioCount(@Ptr long nng_aioPtr1);
	/**
	 * successful then the status will be NNG_ECANCELED.<br>
	 * Original signature : <code>void nng_aio_cancel(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:423</i>
	 */
	@Name("nng_aio_cancel") 
	public static void nngAioCancel(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngAioCancel(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_cancel") 
	protected native static void nngAioCancel(@Ptr long nng_aioPtr1);
	/**
	 * error result to be returned.<br>
	 * Original signature : <code>void nng_aio_abort(nng_aio*, int)</code><br>
	 * <i>native declaration : nng.h:428</i>
	 */
	@Name("nng_aio_abort") 
	public static void nngAioAbort(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int int1) {
		nngAioAbort(Pointer.getPeer(nng_aioPtr1), int1);
	}
	@Name("nng_aio_abort") 
	protected native static void nngAioAbort(@Ptr long nng_aioPtr1, int int1);
	/**
	 * callback or deadlock may occur.<br>
	 * Original signature : <code>void nng_aio_wait(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:433</i>
	 */
	@Name("nng_aio_wait") 
	public static void nngAioWait(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngAioWait(Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_aio_wait") 
	protected native static void nngAioWait(@Ptr long nng_aioPtr1);
	/**
	 * message send operations.<br>
	 * Original signature : <code>void nng_aio_set_msg(nng_aio*, nng_msg*)</code><br>
	 * <i>native declaration : nng.h:438</i>
	 */
	@Name("nng_aio_set_msg") 
	public static void nngAioSetMsg(Pointer<NngLibrary.nng_aio > nng_aioPtr1, Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		nngAioSetMsg(Pointer.getPeer(nng_aioPtr1), Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_aio_set_msg") 
	protected native static void nngAioSetMsg(@Ptr long nng_aioPtr1, @Ptr long nng_msgPtr1);
	/**
	 * receive operation.<br>
	 * Original signature : <code>nng_msg* nng_aio_get_msg(nng_aio*)</code><br>
	 * <i>native declaration : nng.h:443</i>
	 */
	@Name("nng_aio_get_msg") 
	public static Pointer<NngLibrary.nng_msg > nngAioGetMsg(Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		return (Pointer)Pointer.pointerToAddress(nngAioGetMsg(Pointer.getPeer(nng_aioPtr1)), NngLibrary.nng_msg.class);
	}
	@Name("nng_aio_get_msg") 
	@Ptr 
	protected native static long nngAioGetMsg(@Ptr long nng_aioPtr1);
	/**
	 * nng_aio_set_input sets an input parameter at the given index.<br>
	 * Original signature : <code>int nng_aio_set_input(nng_aio*, unsigned, void*)</code><br>
	 * <i>native declaration : nng.h:448</i>
	 */
	@Name("nng_aio_set_input") 
	public static int nngAioSetInput(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int u1, Pointer<? > voidPtr1) {
		return nngAioSetInput(Pointer.getPeer(nng_aioPtr1), u1, Pointer.getPeer(voidPtr1));
	}
	@Name("nng_aio_set_input") 
	protected native static int nngAioSetInput(@Ptr long nng_aioPtr1, int u1, @Ptr long voidPtr1);
	/**
	 * nng_aio_get_input retrieves the input parameter at the given index.<br>
	 * Original signature : <code>void* nng_aio_get_input(nng_aio*, unsigned)</code><br>
	 * <i>native declaration : nng.h:453</i>
	 */
	@Name("nng_aio_get_input") 
	public static Pointer<? > nngAioGetInput(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int u1) {
		return Pointer.pointerToAddress(nngAioGetInput(Pointer.getPeer(nng_aioPtr1), u1));
	}
	@Name("nng_aio_get_input") 
	@Ptr 
	protected native static long nngAioGetInput(@Ptr long nng_aioPtr1, int u1);
	/**
	 * nng_aio_set_output sets an output result at the given index.<br>
	 * Original signature : <code>int nng_aio_set_output(nng_aio*, unsigned, void*)</code><br>
	 * <i>native declaration : nng.h:458</i>
	 */
	@Name("nng_aio_set_output") 
	public static int nngAioSetOutput(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int u1, Pointer<? > voidPtr1) {
		return nngAioSetOutput(Pointer.getPeer(nng_aioPtr1), u1, Pointer.getPeer(voidPtr1));
	}
	@Name("nng_aio_set_output") 
	protected native static int nngAioSetOutput(@Ptr long nng_aioPtr1, int u1, @Ptr long voidPtr1);
	/**
	 * nng_aio_get_output retrieves the output result at the given index.<br>
	 * Original signature : <code>void* nng_aio_get_output(nng_aio*, unsigned)</code><br>
	 * <i>native declaration : nng.h:463</i>
	 */
	@Name("nng_aio_get_output") 
	public static Pointer<? > nngAioGetOutput(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int u1) {
		return Pointer.pointerToAddress(nngAioGetOutput(Pointer.getPeer(nng_aioPtr1), u1));
	}
	@Name("nng_aio_get_output") 
	@Ptr 
	protected native static long nngAioGetOutput(@Ptr long nng_aioPtr1, int u1);
	/**
	 * that any socket specific timeout should be used.<br>
	 * Original signature : <code>void nng_aio_set_timeout(nng_aio*, nng_duration)</code><br>
	 * <i>native declaration : nng.h:468</i>
	 */
	@Name("nng_aio_set_timeout") 
	public static void nngAioSetTimeout(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int nng_duration1) {
		nngAioSetTimeout(Pointer.getPeer(nng_aioPtr1), nng_duration1);
	}
	@Name("nng_aio_set_timeout") 
	protected native static void nngAioSetTimeout(@Ptr long nng_aioPtr1, int nng_duration1);
	/**
	 * to succeed if n <= 4, otherwise it may fail due to NNG_ENOMEM.<br>
	 * Original signature : <code>int nng_aio_set_iov(nng_aio*, unsigned, const nng_iov*)</code><br>
	 * <i>native declaration : nng.h:473</i>
	 */
	@Name("nng_aio_set_iov") 
	public static int nngAioSetIov(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int u1, Pointer<nng_iov > nng_iovPtr1) {
		return nngAioSetIov(Pointer.getPeer(nng_aioPtr1), u1, Pointer.getPeer(nng_iovPtr1));
	}
	@Name("nng_aio_set_iov") 
	protected native static int nngAioSetIov(@Ptr long nng_aioPtr1, int u1, @Ptr long nng_iovPtr1);
	/**
	 * given aio.<br>
	 * Original signature : <code>void nng_aio_finish(nng_aio*, int)</code><br>
	 * <i>native declaration : nng.h:478</i>
	 */
	@Name("nng_aio_finish") 
	public static void nngAioFinish(Pointer<NngLibrary.nng_aio > nng_aioPtr1, int int1) {
		nngAioFinish(Pointer.getPeer(nng_aioPtr1), int1);
	}
	@Name("nng_aio_finish") 
	protected native static void nngAioFinish(@Ptr long nng_aioPtr1, int int1);
	/**
	 * calls the callback.  This returns 0, rather than NNG_ETIMEDOUT.<br>
	 * Original signature : <code>void nng_sleep_aio(nng_duration, nng_aio*)</code><br>
	 * <i>native declaration : nng.h:483</i>
	 */
	@Name("nng_sleep_aio") 
	public static void nngSleepAio(int nng_duration1, Pointer<NngLibrary.nng_aio > nng_aioPtr1) {
		nngSleepAio(nng_duration1, Pointer.getPeer(nng_aioPtr1));
	}
	@Name("nng_sleep_aio") 
	protected native static void nngSleepAio(int nng_duration1, @Ptr long nng_aioPtr1);
	/**
	 * Message API.<br>
	 * Original signature : <code>int nng_msg_alloc(nng_msg**, size_t)</code><br>
	 * <i>native declaration : nng.h:488</i>
	 */
	@Name("nng_msg_alloc") 
	public static int nngMsgAlloc(Pointer<Pointer<NngLibrary.nng_msg > > nng_msgPtrPtr1, long size_t1) {
		return nngMsgAlloc(Pointer.getPeer(nng_msgPtrPtr1), size_t1);
	}
	@Name("nng_msg_alloc") 
	protected native static int nngMsgAlloc(@Ptr long nng_msgPtrPtr1, long size_t1);
	/**
	 * Original signature : <code>void nng_msg_free(nng_msg*)</code><br>
	 * <i>native declaration : nng.h:490</i>
	 */
	@Name("nng_msg_free") 
	public static void nngMsgFree(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		nngMsgFree(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_free") 
	protected native static void nngMsgFree(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>int nng_msg_realloc(nng_msg*, size_t)</code><br>
	 * <i>native declaration : nng.h:492</i>
	 */
	@Name("nng_msg_realloc") 
	public static int nngMsgRealloc(Pointer<NngLibrary.nng_msg > nng_msgPtr1, long size_t1) {
		return nngMsgRealloc(Pointer.getPeer(nng_msgPtr1), size_t1);
	}
	@Name("nng_msg_realloc") 
	protected native static int nngMsgRealloc(@Ptr long nng_msgPtr1, long size_t1);
	/**
	 * Original signature : <code>void* nng_msg_header(nng_msg*)</code><br>
	 * <i>native declaration : nng.h:494</i>
	 */
	@Name("nng_msg_header") 
	public static Pointer<? > nngMsgHeader(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return Pointer.pointerToAddress(nngMsgHeader(Pointer.getPeer(nng_msgPtr1)));
	}
	@Name("nng_msg_header") 
	@Ptr 
	protected native static long nngMsgHeader(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>size_t nng_msg_header_len(const nng_msg*)</code><br>
	 * <i>native declaration : nng.h:496</i>
	 */
	@Name("nng_msg_header_len") 
	public static long nngMsgHeaderLen(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return nngMsgHeaderLen(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_header_len") 
	protected native static long nngMsgHeaderLen(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>void* nng_msg_body(nng_msg*)</code><br>
	 * <i>native declaration : nng.h:498</i>
	 */
	@Name("nng_msg_body") 
	public static Pointer<? > nngMsgBody(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return Pointer.pointerToAddress(nngMsgBody(Pointer.getPeer(nng_msgPtr1)));
	}
	@Name("nng_msg_body") 
	@Ptr 
	protected native static long nngMsgBody(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>size_t nng_msg_len(const nng_msg*)</code><br>
	 * <i>native declaration : nng.h:500</i>
	 */
	@Name("nng_msg_len") 
	public static long nngMsgLen(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return nngMsgLen(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_len") 
	protected native static long nngMsgLen(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>int nng_msg_append(nng_msg*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:502</i>
	 */
	@Name("nng_msg_append") 
	public static int nngMsgAppend(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngMsgAppend(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_msg_append") 
	protected native static int nngMsgAppend(@Ptr long nng_msgPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_insert(nng_msg*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:504</i>
	 */
	@Name("nng_msg_insert") 
	public static int nngMsgInsert(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngMsgInsert(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_msg_insert") 
	protected native static int nngMsgInsert(@Ptr long nng_msgPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_trim(nng_msg*, size_t)</code><br>
	 * <i>native declaration : nng.h:506</i>
	 */
	@Name("nng_msg_trim") 
	public static int nngMsgTrim(Pointer<NngLibrary.nng_msg > nng_msgPtr1, long size_t1) {
		return nngMsgTrim(Pointer.getPeer(nng_msgPtr1), size_t1);
	}
	@Name("nng_msg_trim") 
	protected native static int nngMsgTrim(@Ptr long nng_msgPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_chop(nng_msg*, size_t)</code><br>
	 * <i>native declaration : nng.h:508</i>
	 */
	@Name("nng_msg_chop") 
	public static int nngMsgChop(Pointer<NngLibrary.nng_msg > nng_msgPtr1, long size_t1) {
		return nngMsgChop(Pointer.getPeer(nng_msgPtr1), size_t1);
	}
	@Name("nng_msg_chop") 
	protected native static int nngMsgChop(@Ptr long nng_msgPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_header_append(nng_msg*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:510</i>
	 */
	@Name("nng_msg_header_append") 
	public static int nngMsgHeaderAppend(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngMsgHeaderAppend(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_msg_header_append") 
	protected native static int nngMsgHeaderAppend(@Ptr long nng_msgPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_header_insert(nng_msg*, const void*, size_t)</code><br>
	 * <i>native declaration : nng.h:512</i>
	 */
	@Name("nng_msg_header_insert") 
	public static int nngMsgHeaderInsert(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nngMsgHeaderInsert(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nng_msg_header_insert") 
	protected native static int nngMsgHeaderInsert(@Ptr long nng_msgPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_header_trim(nng_msg*, size_t)</code><br>
	 * <i>native declaration : nng.h:514</i>
	 */
	@Name("nng_msg_header_trim") 
	public static int nngMsgHeaderTrim(Pointer<NngLibrary.nng_msg > nng_msgPtr1, long size_t1) {
		return nngMsgHeaderTrim(Pointer.getPeer(nng_msgPtr1), size_t1);
	}
	@Name("nng_msg_header_trim") 
	protected native static int nngMsgHeaderTrim(@Ptr long nng_msgPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_header_chop(nng_msg*, size_t)</code><br>
	 * <i>native declaration : nng.h:516</i>
	 */
	@Name("nng_msg_header_chop") 
	public static int nngMsgHeaderChop(Pointer<NngLibrary.nng_msg > nng_msgPtr1, long size_t1) {
		return nngMsgHeaderChop(Pointer.getPeer(nng_msgPtr1), size_t1);
	}
	@Name("nng_msg_header_chop") 
	protected native static int nngMsgHeaderChop(@Ptr long nng_msgPtr1, long size_t1);
	/**
	 * Original signature : <code>int nng_msg_header_append_u32(nng_msg*, uint32_t)</code><br>
	 * <i>native declaration : nng.h:518</i>
	 */
	@Name("nng_msg_header_append_u32") 
	public static int nngMsgHeaderAppendU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, int uint32_t1) {
		return nngMsgHeaderAppendU32(Pointer.getPeer(nng_msgPtr1), uint32_t1);
	}
	@Name("nng_msg_header_append_u32") 
	protected native static int nngMsgHeaderAppendU32(@Ptr long nng_msgPtr1, int uint32_t1);
	/**
	 * Original signature : <code>int nng_msg_header_insert_u32(nng_msg*, uint32_t)</code><br>
	 * <i>native declaration : nng.h:520</i>
	 */
	@Name("nng_msg_header_insert_u32") 
	public static int nngMsgHeaderInsertU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, int uint32_t1) {
		return nngMsgHeaderInsertU32(Pointer.getPeer(nng_msgPtr1), uint32_t1);
	}
	@Name("nng_msg_header_insert_u32") 
	protected native static int nngMsgHeaderInsertU32(@Ptr long nng_msgPtr1, int uint32_t1);
	/**
	 * Original signature : <code>int nng_msg_header_chop_u32(nng_msg*, uint32_t*)</code><br>
	 * <i>native declaration : nng.h:522</i>
	 */
	@Name("nng_msg_header_chop_u32") 
	public static int nngMsgHeaderChopU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<Integer > uint32_tPtr1) {
		return nngMsgHeaderChopU32(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(uint32_tPtr1));
	}
	@Name("nng_msg_header_chop_u32") 
	protected native static int nngMsgHeaderChopU32(@Ptr long nng_msgPtr1, @Ptr long uint32_tPtr1);
	/**
	 * Original signature : <code>int nng_msg_header_trim_u32(nng_msg*, uint32_t*)</code><br>
	 * <i>native declaration : nng.h:524</i>
	 */
	@Name("nng_msg_header_trim_u32") 
	public static int nngMsgHeaderTrimU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<Integer > uint32_tPtr1) {
		return nngMsgHeaderTrimU32(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(uint32_tPtr1));
	}
	@Name("nng_msg_header_trim_u32") 
	protected native static int nngMsgHeaderTrimU32(@Ptr long nng_msgPtr1, @Ptr long uint32_tPtr1);
	/**
	 * Original signature : <code>int nng_msg_append_u32(nng_msg*, uint32_t)</code><br>
	 * <i>native declaration : nng.h:526</i>
	 */
	@Name("nng_msg_append_u32") 
	public static int nngMsgAppendU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, int uint32_t1) {
		return nngMsgAppendU32(Pointer.getPeer(nng_msgPtr1), uint32_t1);
	}
	@Name("nng_msg_append_u32") 
	protected native static int nngMsgAppendU32(@Ptr long nng_msgPtr1, int uint32_t1);
	/**
	 * Original signature : <code>int nng_msg_insert_u32(nng_msg*, uint32_t)</code><br>
	 * <i>native declaration : nng.h:528</i>
	 */
	@Name("nng_msg_insert_u32") 
	public static int nngMsgInsertU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, int uint32_t1) {
		return nngMsgInsertU32(Pointer.getPeer(nng_msgPtr1), uint32_t1);
	}
	@Name("nng_msg_insert_u32") 
	protected native static int nngMsgInsertU32(@Ptr long nng_msgPtr1, int uint32_t1);
	/**
	 * Original signature : <code>int nng_msg_chop_u32(nng_msg*, uint32_t*)</code><br>
	 * <i>native declaration : nng.h:530</i>
	 */
	@Name("nng_msg_chop_u32") 
	public static int nngMsgChopU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<Integer > uint32_tPtr1) {
		return nngMsgChopU32(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(uint32_tPtr1));
	}
	@Name("nng_msg_chop_u32") 
	protected native static int nngMsgChopU32(@Ptr long nng_msgPtr1, @Ptr long uint32_tPtr1);
	/**
	 * Original signature : <code>int nng_msg_trim_u32(nng_msg*, uint32_t*)</code><br>
	 * <i>native declaration : nng.h:532</i>
	 */
	@Name("nng_msg_trim_u32") 
	public static int nngMsgTrimU32(Pointer<NngLibrary.nng_msg > nng_msgPtr1, Pointer<Integer > uint32_tPtr1) {
		return nngMsgTrimU32(Pointer.getPeer(nng_msgPtr1), Pointer.getPeer(uint32_tPtr1));
	}
	@Name("nng_msg_trim_u32") 
	protected native static int nngMsgTrimU32(@Ptr long nng_msgPtr1, @Ptr long uint32_tPtr1);
	/**
	 * Original signature : <code>int nng_msg_dup(nng_msg**, const nng_msg*)</code><br>
	 * <i>native declaration : nng.h:534</i>
	 */
	@Name("nng_msg_dup") 
	public static int nngMsgDup(Pointer<Pointer<NngLibrary.nng_msg > > nng_msgPtrPtr1, Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return nngMsgDup(Pointer.getPeer(nng_msgPtrPtr1), Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_dup") 
	protected native static int nngMsgDup(@Ptr long nng_msgPtrPtr1, @Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>void nng_msg_clear(nng_msg*)</code><br>
	 * <i>native declaration : nng.h:536</i>
	 */
	@Name("nng_msg_clear") 
	public static void nngMsgClear(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		nngMsgClear(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_clear") 
	protected native static void nngMsgClear(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>void nng_msg_header_clear(nng_msg*)</code><br>
	 * <i>native declaration : nng.h:538</i>
	 */
	@Name("nng_msg_header_clear") 
	public static void nngMsgHeaderClear(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		nngMsgHeaderClear(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_header_clear") 
	protected native static void nngMsgHeaderClear(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>void nng_msg_set_pipe(nng_msg*, nng_pipe)</code><br>
	 * <i>native declaration : nng.h:540</i>
	 */
	@Name("nng_msg_set_pipe") 
	public static void nngMsgSetPipe(Pointer<NngLibrary.nng_msg > nng_msgPtr1, nng_pipe_s nng_pipe1) {
		nngMsgSetPipe(Pointer.getPeer(nng_msgPtr1), nng_pipe1);
	}
	@Name("nng_msg_set_pipe") 
	protected native static void nngMsgSetPipe(@Ptr long nng_msgPtr1, nng_pipe_s nng_pipe1);
	/**
	 * Original signature : <code>nng_pipe nng_msg_get_pipe(const nng_msg*)</code><br>
	 * <i>native declaration : nng.h:542</i>
	 */
	@Name("nng_msg_get_pipe") 
	public static nng_pipe_s nngMsgGetPipe(Pointer<NngLibrary.nng_msg > nng_msgPtr1) {
		return nngMsgGetPipe(Pointer.getPeer(nng_msgPtr1));
	}
	@Name("nng_msg_get_pipe") 
	protected native static nng_pipe_s nngMsgGetPipe(@Ptr long nng_msgPtr1);
	/**
	 * Original signature : <code>int nng_msg_getopt(nng_msg*, int, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:544</i>
	 */
	@Name("nng_msg_getopt") 
	public static int nngMsgGetopt(Pointer<NngLibrary.nng_msg > nng_msgPtr1, int int1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngMsgGetopt(Pointer.getPeer(nng_msgPtr1), int1, Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_msg_getopt") 
	protected native static int nngMsgGetopt(@Ptr long nng_msgPtr1, int int1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * is associated with an invalid or untrusted remote peer.<br>
	 * Original signature : <code>int nng_pipe_getopt(nng_pipe, const char*, void*, size_t*)</code><br>
	 * <i>native declaration : nng.h:549</i>
	 */
	@Name("nng_pipe_getopt") 
	public static int nngPipeGetopt(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, Pointer<Long > size_tPtr1) {
		return nngPipeGetopt(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_pipe_getopt") 
	protected native static int nngPipeGetopt(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long voidPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_bool(nng_pipe, const char*, bool*)</code><br>
	 * <i>native declaration : nng.h:551</i>
	 */
	@Name("nng_pipe_getopt_bool") 
	public static int nngPipeGetoptBool(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Boolean > boolPtr1) {
		return nngPipeGetoptBool(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(boolPtr1));
	}
	@Name("nng_pipe_getopt_bool") 
	protected native static int nngPipeGetoptBool(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long boolPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_int(nng_pipe, const char*, int*)</code><br>
	 * <i>native declaration : nng.h:553</i>
	 */
	@Name("nng_pipe_getopt_int") 
	public static int nngPipeGetoptInt(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Integer > intPtr1) {
		return nngPipeGetoptInt(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(intPtr1));
	}
	@Name("nng_pipe_getopt_int") 
	protected native static int nngPipeGetoptInt(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long intPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_ms(nng_pipe, const char*, nng_duration*)</code><br>
	 * <i>native declaration : nng.h:555</i>
	 */
	@Name("nng_pipe_getopt_ms") 
	public static int nngPipeGetoptMs(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Integer > nng_durationPtr1) {
		return nngPipeGetoptMs(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_durationPtr1));
	}
	@Name("nng_pipe_getopt_ms") 
	protected native static int nngPipeGetoptMs(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long nng_durationPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_size(nng_pipe, const char*, size_t*)</code><br>
	 * <i>native declaration : nng.h:557</i>
	 */
	@Name("nng_pipe_getopt_size") 
	public static int nngPipeGetoptSize(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Long > size_tPtr1) {
		return nngPipeGetoptSize(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nng_pipe_getopt_size") 
	protected native static int nngPipeGetoptSize(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_sockaddr(nng_pipe, const char*, nng_sockaddr*)</code><br>
	 * <i>native declaration : nng.h:559</i>
	 */
	@Name("nng_pipe_getopt_sockaddr") 
	public static int nngPipeGetoptSockaddr(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<nng_sockaddr > nng_sockaddrPtr1) {
		return nngPipeGetoptSockaddr(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(nng_sockaddrPtr1));
	}
	@Name("nng_pipe_getopt_sockaddr") 
	protected native static int nngPipeGetoptSockaddr(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long nng_sockaddrPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_uint64(nng_pipe, const char*, uint64_t*)</code><br>
	 * <i>native declaration : nng.h:561</i>
	 */
	@Name("nng_pipe_getopt_uint64") 
	public static int nngPipeGetoptUint64(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Long > uint64_tPtr1) {
		return nngPipeGetoptUint64(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(uint64_tPtr1));
	}
	@Name("nng_pipe_getopt_uint64") 
	protected native static int nngPipeGetoptUint64(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long uint64_tPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_ptr(nng_pipe, const char*, void**)</code><br>
	 * <i>native declaration : nng.h:563</i>
	 */
	@Name("nng_pipe_getopt_ptr") 
	public static int nngPipeGetoptPtr(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Pointer<? > > voidPtrPtr1) {
		return nngPipeGetoptPtr(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtrPtr1));
	}
	@Name("nng_pipe_getopt_ptr") 
	protected native static int nngPipeGetoptPtr(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long voidPtrPtr1);
	/**
	 * Original signature : <code>int nng_pipe_getopt_string(nng_pipe, const char*, char**)</code><br>
	 * <i>native declaration : nng.h:565</i>
	 */
	@Name("nng_pipe_getopt_string") 
	public static int nngPipeGetoptString(nng_pipe_s nng_pipe1, Pointer<Byte > charPtr1, Pointer<Pointer<Byte > > charPtrPtr1) {
		return nngPipeGetoptString(nng_pipe1, Pointer.getPeer(charPtr1), Pointer.getPeer(charPtrPtr1));
	}
	@Name("nng_pipe_getopt_string") 
	protected native static int nngPipeGetoptString(nng_pipe_s nng_pipe1, @Ptr long charPtr1, @Ptr long charPtrPtr1);
	/**
	 * Original signature : <code>int nng_pipe_close(nng_pipe)</code><br>
	 * <i>native declaration : nng.h:567</i>
	 */
	@Name("nng_pipe_close") 
	public static native int nngPipeClose(nng_pipe_s nng_pipe1);
	/**
	 * Original signature : <code>int nng_pipe_id(nng_pipe)</code><br>
	 * <i>native declaration : nng.h:569</i>
	 */
	@Name("nng_pipe_id") 
	public static native int nngPipeId(nng_pipe_s nng_pipe1);
	/**
	 * Original signature : <code>nng_socket nng_pipe_socket(nng_pipe)</code><br>
	 * <i>native declaration : nng.h:571</i>
	 */
	@Name("nng_pipe_socket") 
	public static native nng_socket_s nngPipeSocket(nng_pipe_s nng_pipe1);
	/**
	 * Original signature : <code>nng_dialer nng_pipe_dialer(nng_pipe)</code><br>
	 * <i>native declaration : nng.h:573</i>
	 */
	@Name("nng_pipe_dialer") 
	public static native nng_dialer_s nngPipeDialer(nng_pipe_s nng_pipe1);
	/**
	 * Original signature : <code>nng_listener nng_pipe_listener(nng_pipe)</code><br>
	 * <i>native declaration : nng.h:575</i>
	 */
	@Name("nng_pipe_listener") 
	public static native nng_listener_s nngPipeListener(nng_pipe_s nng_pipe1);
	/**
	 * which means that messages from one side are forwarded to the other.<br>
	 * Original signature : <code>int nng_device(nng_socket, nng_socket)</code><br>
	 * <i>native declaration : nng.h:603</i>
	 */
	@Name("nng_device") 
	public static native int nngDevice(nng_socket_s nng_socket1, nng_socket_s nng_socket2);
	/**
	 * members.  It can be freed with nng_url_free.<br>
	 * Original signature : <code>int nng_url_parse(nng_url**, const char*)</code><br>
	 * <i>native declaration : nng.h:667</i>
	 */
	@Name("nng_url_parse") 
	public static int nngUrlParse(Pointer<Pointer<nng_url > > nng_urlPtrPtr1, Pointer<Byte > charPtr1) {
		return nngUrlParse(Pointer.getPeer(nng_urlPtrPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nng_url_parse") 
	protected native static int nngUrlParse(@Ptr long nng_urlPtrPtr1, @Ptr long charPtr1);
	/**
	 * nng_url_free frees a URL structure that was created by nng_url_parse9().<br>
	 * Original signature : <code>void nng_url_free(nng_url*)</code><br>
	 * <i>native declaration : nng.h:672</i>
	 */
	@Name("nng_url_free") 
	public static void nngUrlFree(Pointer<nng_url > nng_urlPtr1) {
		nngUrlFree(Pointer.getPeer(nng_urlPtr1));
	}
	@Name("nng_url_free") 
	protected native static void nngUrlFree(@Ptr long nng_urlPtr1);
	/**
	 * nng_url_clone clones a URL structure.<br>
	 * Original signature : <code>int nng_url_clone(nng_url**, const nng_url*)</code><br>
	 * <i>native declaration : nng.h:677</i>
	 */
	@Name("nng_url_clone") 
	public static int nngUrlClone(Pointer<Pointer<nng_url > > nng_urlPtrPtr1, Pointer<nng_url > nng_urlPtr1) {
		return nngUrlClone(Pointer.getPeer(nng_urlPtrPtr1), Pointer.getPeer(nng_urlPtr1));
	}
	@Name("nng_url_clone") 
	protected native static int nngUrlClone(@Ptr long nng_urlPtrPtr1, @Ptr long nng_urlPtr1);
	/**
	 * nng_version returns the library version as a human readable string.<br>
	 * Original signature : <code>char* nng_version()</code><br>
	 * <i>native declaration : nng.h:682</i>
	 */
	@Name("nng_version") 
	public static Pointer<Byte > nngVersion() {
		return (Pointer)Pointer.pointerToAddress(nngVersion$2(), Byte.class);
	}
	@Name("nng_version") 
	@Ptr 
	protected native static long nngVersion$2();
	/** Undefined type */
	public static interface nng_msg {
		
	};
	/** Undefined type */
	public static interface nng_aio {
		
	};
}
