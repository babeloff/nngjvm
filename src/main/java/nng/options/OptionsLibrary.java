package nng.options;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>options</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("options") 
@Runtime(CRuntime.class) 
public class OptionsLibrary {
	static {
		BridJ.register();
	}
	/**
	 * NNG_EINVAL if the option parse is invalid for any reason.<br>
	 * Original signature : <code>int nng_opts_parse(int, const char**, const nng_optspec*, int*, const char**, int*)</code><br>
	 * <i>native declaration : supplemental/util/options.h:17</i>
	 */
	@Name("nng_opts_parse") 
	public static int nngOptsParse(int argc, Pointer<Pointer<Byte > > argv, Pointer<nng_optspec > opts, Pointer<Integer > val, Pointer<Pointer<Byte > > optarg, Pointer<Integer > optidx) {
		return nngOptsParse(argc, Pointer.getPeer(argv), Pointer.getPeer(opts), Pointer.getPeer(val), Pointer.getPeer(optarg), Pointer.getPeer(optidx));
	}
	@Name("nng_opts_parse") 
	protected native static int nngOptsParse(int argc, @Ptr long argv, @Ptr long opts, @Ptr long val, @Ptr long optarg, @Ptr long optidx);
}
