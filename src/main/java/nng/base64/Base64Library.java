package nng.base64;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>base64</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("base64") 
@Runtime(CRuntime.class) 
public class Base64Library {
	static {
		BridJ.register();
	}
	/**
	 * null-terminated string.<br>
	 * Original signature : <code>int nni_base64_encode(const uint8_t*, size_t, char*, size_t)</code><br>
	 * <i>native declaration : supplemental/base64/base64.h:4</i>
	 */
	@Name("nni_base64_encode") 
	public static int nniBase64Encode(Pointer<Byte > uint8_tPtr1, long size_t1, Pointer<Byte > charPtr1, long size_t2) {
		return nniBase64Encode(Pointer.getPeer(uint8_tPtr1), size_t1, Pointer.getPeer(charPtr1), size_t2);
	}
	@Name("nni_base64_encode") 
	protected native static int nniBase64Encode(@Ptr long uint8_tPtr1, long size_t1, @Ptr long charPtr1, long size_t2);
	/**
	 * This function decodes a base64 string into supplied buffer.<br>
	 * Original signature : <code>int nni_base64_decode(const char*, size_t, uint8_t*, size_t)</code><br>
	 * <i>native declaration : supplemental/base64/base64.h:9</i>
	 */
	@Name("nni_base64_decode") 
	public static int nniBase64Decode(Pointer<Byte > charPtr1, long size_t1, Pointer<Byte > uint8_tPtr1, long size_t2) {
		return nniBase64Decode(Pointer.getPeer(charPtr1), size_t1, Pointer.getPeer(uint8_tPtr1), size_t2);
	}
	@Name("nni_base64_decode") 
	protected native static int nniBase64Decode(@Ptr long charPtr1, long size_t1, @Ptr long uint8_tPtr1, long size_t2);
}
