package nng.httpapi;
import nng.core.nng_sockaddr;
import nng.core.nng_url;
import nng.tlsapi.TlsApiLibrary.nng_aio;
import nng.tlsapi.TlsApiLibrary.nng_tls_config;
import nng.tlsapi.TlsApiLibrary.nni_tcp_conn;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>httpApi</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("httpApi") 
@Runtime(CRuntime.class) 
public class HttpApiLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : supplemental/http/http_api.h:281</i> */
	public static abstract class NniHttpHandlerInitArg1Callback extends Callback<NniHttpHandlerInitArg1Callback > {
		public void apply(Pointer<nng_aio > nni_aioPtr1) {
			apply(Pointer.getPeer(nni_aioPtr1));
		}
		public void apply(@Ptr long nni_aioPtr1) {
			apply((Pointer)Pointer.pointerToAddress(nni_aioPtr1, nng_aio.class));
		}
	};
	/**
	 * not be used elsewhere.<br>
	 * Original signature : <code>char* nni_http_reason(uint16_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:10</i>
	 */
	@Name("nni_http_reason") 
	public static Pointer<Byte > nniHttpReason(short uint16_t1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReason$2(uint16_t1), Byte.class);
	}
	@Name("nni_http_reason") 
	@Ptr 
	protected native static long nniHttpReason$2(short uint16_t1);
	/**
	 * Original signature : <code>int nni_http_req_init(nni_http_req**)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:12</i>
	 */
	@Name("nni_http_req_init") 
	public static int nniHttpReqInit(Pointer<Pointer<HttpApiLibrary.nng_http_req > > nni_http_reqPtrPtr1) {
		return nniHttpReqInit(Pointer.getPeer(nni_http_reqPtrPtr1));
	}
	@Name("nni_http_req_init") 
	protected native static int nniHttpReqInit(@Ptr long nni_http_reqPtrPtr1);
	/**
	 * Original signature : <code>void nni_http_req_reset(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:14</i>
	 */
	@Name("nni_http_req_reset") 
	public static void nniHttpReqReset(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		nniHttpReqReset(Pointer.getPeer(nni_http_reqPtr1));
	}
	@Name("nni_http_req_reset") 
	protected native static void nniHttpReqReset(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>int nni_http_req_get_buf(nni_http_req*, void**, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:16</i>
	 */
	@Name("nni_http_req_get_buf") 
	public static int nniHttpReqGetBuf(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Pointer<? > > voidPtrPtr1, Pointer<Long > size_tPtr1) {
		return nniHttpReqGetBuf(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(voidPtrPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_req_get_buf") 
	protected native static int nniHttpReqGetBuf(@Ptr long nni_http_reqPtr1, @Ptr long voidPtrPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nni_http_req_parse(nni_http_req*, void*, size_t, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:18</i>
	 */
	@Name("nni_http_req_parse") 
	public static int nniHttpReqParse(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<? > voidPtr1, long size_t1, Pointer<Long > size_tPtr1) {
		return nniHttpReqParse(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(voidPtr1), size_t1, Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_req_parse") 
	protected native static int nniHttpReqParse(@Ptr long nni_http_reqPtr1, @Ptr long voidPtr1, long size_t1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>char* nni_http_req_headers(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:20</i>
	 */
	@Name("nni_http_req_headers") 
	public static Pointer<Byte > nniHttpReqHeaders(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReqHeaders(Pointer.getPeer(nni_http_reqPtr1)), Byte.class);
	}
	@Name("nni_http_req_headers") 
	@Ptr 
	protected native static long nniHttpReqHeaders(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>void nni_http_req_get_data(nni_http_req*, void**, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:22</i>
	 */
	@Name("nni_http_req_get_data") 
	public static void nniHttpReqGetData(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Pointer<? > > voidPtrPtr1, Pointer<Long > size_tPtr1) {
		nniHttpReqGetData(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(voidPtrPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_req_get_data") 
	protected native static void nniHttpReqGetData(@Ptr long nni_http_reqPtr1, @Ptr long voidPtrPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>void nni_http_res_reset(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:24</i>
	 */
	@Name("nni_http_res_reset") 
	public static void nniHttpResReset(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		nniHttpResReset(Pointer.getPeer(nni_http_resPtr1));
	}
	@Name("nni_http_res_reset") 
	protected native static void nniHttpResReset(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>int nni_http_res_get_buf(nni_http_res*, void**, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:26</i>
	 */
	@Name("nni_http_res_get_buf") 
	public static int nniHttpResGetBuf(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Pointer<? > > voidPtrPtr1, Pointer<Long > size_tPtr1) {
		return nniHttpResGetBuf(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(voidPtrPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_res_get_buf") 
	protected native static int nniHttpResGetBuf(@Ptr long nni_http_resPtr1, @Ptr long voidPtrPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>int nni_http_res_parse(nni_http_res*, void*, size_t, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:28</i>
	 */
	@Name("nni_http_res_parse") 
	public static int nniHttpResParse(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<? > voidPtr1, long size_t1, Pointer<Long > size_tPtr1) {
		return nniHttpResParse(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(voidPtr1), size_t1, Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_res_parse") 
	protected native static int nniHttpResParse(@Ptr long nni_http_resPtr1, @Ptr long voidPtr1, long size_t1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>void nni_http_res_get_data(nni_http_res*, void**, size_t*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:30</i>
	 */
	@Name("nni_http_res_get_data") 
	public static void nniHttpResGetData(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Pointer<? > > voidPtrPtr1, Pointer<Long > size_tPtr1) {
		nniHttpResGetData(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(voidPtrPtr1), Pointer.getPeer(size_tPtr1));
	}
	@Name("nni_http_res_get_data") 
	protected native static void nniHttpResGetData(@Ptr long nni_http_resPtr1, @Ptr long voidPtrPtr1, @Ptr long size_tPtr1);
	/**
	 * Original signature : <code>char* nni_http_res_headers(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:32</i>
	 */
	@Name("nni_http_res_headers") 
	public static Pointer<Byte > nniHttpResHeaders(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpResHeaders(Pointer.getPeer(nni_http_resPtr1)), Byte.class);
	}
	@Name("nni_http_res_headers") 
	@Ptr 
	protected native static long nniHttpResHeaders(@Ptr long nni_http_resPtr1);
	/**
	 * Private to the server. (Used to support session hijacking.)<br>
	 * Original signature : <code>void nni_http_conn_set_ctx(nni_http_conn*, void*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:37</i>
	 */
	@Name("nni_http_conn_set_ctx") 
	public static void nniHttpConnSetCtx(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<? > voidPtr1) {
		nniHttpConnSetCtx(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(voidPtr1));
	}
	@Name("nni_http_conn_set_ctx") 
	protected native static void nniHttpConnSetCtx(@Ptr long nni_http_connPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>void* nni_http_conn_get_ctx(nni_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:39</i>
	 */
	@Name("nni_http_conn_get_ctx") 
	public static Pointer<? > nniHttpConnGetCtx(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1) {
		return Pointer.pointerToAddress(nniHttpConnGetCtx(Pointer.getPeer(nni_http_connPtr1)));
	}
	@Name("nni_http_conn_get_ctx") 
	@Ptr 
	protected native static long nniHttpConnGetCtx(@Ptr long nni_http_connPtr1);
	/**
	 * and are not for use by other code.<br>
	 * Original signature : <code>int nni_http_conn_init_tcp(nni_http_conn**, nni_tcp_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:44</i>
	 */
	@Name("nni_http_conn_init_tcp") 
	public static int nniHttpConnInitTcp(Pointer<Pointer<HttpApiLibrary.nng_http_conn > > nni_http_connPtrPtr1, Pointer<nni_tcp_conn > nni_tcp_connPtr1) {
		return nniHttpConnInitTcp(Pointer.getPeer(nni_http_connPtrPtr1), Pointer.getPeer(nni_tcp_connPtr1));
	}
	@Name("nni_http_conn_init_tcp") 
	protected native static int nniHttpConnInitTcp(@Ptr long nni_http_connPtrPtr1, @Ptr long nni_tcp_connPtr1);
	/**
	 * Original signature : <code>int nni_http_conn_init_tls(nni_http_conn**, nng_tls_config*, nni_tcp_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:46</i>
	 */
	@Name("nni_http_conn_init_tls") 
	public static int nniHttpConnInitTls(Pointer<Pointer<HttpApiLibrary.nng_http_conn > > nni_http_connPtrPtr1, Pointer<nng_tls_config > nng_tls_configPtr1, Pointer<nni_tcp_conn > nni_tcp_connPtr1) {
		return nniHttpConnInitTls(Pointer.getPeer(nni_http_connPtrPtr1), Pointer.getPeer(nng_tls_configPtr1), Pointer.getPeer(nni_tcp_connPtr1));
	}
	@Name("nni_http_conn_init_tls") 
	protected native static int nniHttpConnInitTls(@Ptr long nni_http_connPtrPtr1, @Ptr long nng_tls_configPtr1, @Ptr long nni_tcp_connPtr1);
	/**
	 * Original signature : <code>void nni_http_conn_close(nni_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:48</i>
	 */
	@Name("nni_http_conn_close") 
	public static void nniHttpConnClose(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1) {
		nniHttpConnClose(Pointer.getPeer(nni_http_connPtr1));
	}
	@Name("nni_http_conn_close") 
	protected native static void nniHttpConnClose(@Ptr long nni_http_connPtr1);
	/**
	 * Original signature : <code>void nni_http_conn_fini(nni_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:50</i>
	 */
	@Name("nni_http_conn_fini") 
	public static void nniHttpConnFini(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1) {
		nniHttpConnFini(Pointer.getPeer(nni_http_connPtr1));
	}
	@Name("nni_http_conn_fini") 
	protected native static void nniHttpConnFini(@Ptr long nni_http_connPtr1);
	/**
	 * must not use them for any other purpose.<br>
	 * Original signature : <code>int nni_http_req_alloc(nni_http_req**, const nni_url*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:55</i>
	 */
	@Name("nni_http_req_alloc") 
	public static int nniHttpReqAlloc(Pointer<Pointer<HttpApiLibrary.nng_http_req > > nni_http_reqPtrPtr1, Pointer<nng_url > nni_urlPtr1) {
		return nniHttpReqAlloc(Pointer.getPeer(nni_http_reqPtrPtr1), Pointer.getPeer(nni_urlPtr1));
	}
	@Name("nni_http_req_alloc") 
	protected native static int nniHttpReqAlloc(@Ptr long nni_http_reqPtrPtr1, @Ptr long nni_urlPtr1);
	/**
	 * Original signature : <code>int nni_http_res_alloc(nni_http_res**)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:57</i>
	 */
	@Name("nni_http_res_alloc") 
	public static int nniHttpResAlloc(Pointer<Pointer<HttpApiLibrary.nng_http_res > > nni_http_resPtrPtr1) {
		return nniHttpResAlloc(Pointer.getPeer(nni_http_resPtrPtr1));
	}
	@Name("nni_http_res_alloc") 
	protected native static int nniHttpResAlloc(@Ptr long nni_http_resPtrPtr1);
	/**
	 * Original signature : <code>int nni_http_res_alloc_error(nni_http_res**, uint16_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:59</i>
	 */
	@Name("nni_http_res_alloc_error") 
	public static int nniHttpResAllocError(Pointer<Pointer<HttpApiLibrary.nng_http_res > > nni_http_resPtrPtr1, short uint16_t1) {
		return nniHttpResAllocError(Pointer.getPeer(nni_http_resPtrPtr1), uint16_t1);
	}
	@Name("nni_http_res_alloc_error") 
	protected native static int nniHttpResAllocError(@Ptr long nni_http_resPtrPtr1, short uint16_t1);
	/**
	 * Original signature : <code>void nni_http_req_free(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:61</i>
	 */
	@Name("nni_http_req_free") 
	public static void nniHttpReqFree(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		nniHttpReqFree(Pointer.getPeer(nni_http_reqPtr1));
	}
	@Name("nni_http_req_free") 
	protected native static void nniHttpReqFree(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>void nni_http_res_free(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:63</i>
	 */
	@Name("nni_http_res_free") 
	public static void nniHttpResFree(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		nniHttpResFree(Pointer.getPeer(nni_http_resPtr1));
	}
	@Name("nni_http_res_free") 
	protected native static void nniHttpResFree(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>void nni_http_write_req(nni_http_conn*, nni_http_req*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:65</i>
	 */
	@Name("nni_http_write_req") 
	public static void nniHttpWriteReq(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpWriteReq(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_write_req") 
	protected native static void nniHttpWriteReq(@Ptr long nni_http_connPtr1, @Ptr long nni_http_reqPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_write_res(nni_http_conn*, nni_http_res*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:67</i>
	 */
	@Name("nni_http_write_res") 
	public static void nniHttpWriteRes(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpWriteRes(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_write_res") 
	protected native static void nniHttpWriteRes(@Ptr long nni_http_connPtr1, @Ptr long nni_http_resPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_read_req(nni_http_conn*, nni_http_req*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:69</i>
	 */
	@Name("nni_http_read_req") 
	public static void nniHttpReadReq(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpReadReq(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_read_req") 
	protected native static void nniHttpReadReq(@Ptr long nni_http_connPtr1, @Ptr long nni_http_reqPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_read_res(nni_http_conn*, nni_http_res*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:71</i>
	 */
	@Name("nni_http_read_res") 
	public static void nniHttpReadRes(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpReadRes(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_read_res") 
	protected native static void nniHttpReadRes(@Ptr long nni_http_connPtr1, @Ptr long nni_http_resPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>char* nni_http_req_get_header(nni_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:73</i>
	 */
	@Name("nni_http_req_get_header") 
	public static Pointer<Byte > nniHttpReqGetHeader(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReqGetHeader(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Name("nni_http_req_get_header") 
	@Ptr 
	protected native static long nniHttpReqGetHeader(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>char* nni_http_res_get_header(nni_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:75</i>
	 */
	@Name("nni_http_res_get_header") 
	public static Pointer<Byte > nniHttpResGetHeader(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpResGetHeader(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1)), Byte.class);
	}
	@Name("nni_http_res_get_header") 
	@Ptr 
	protected native static long nniHttpResGetHeader(@Ptr long nni_http_resPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int nni_http_req_add_header(nni_http_req*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:77</i>
	 */
	@Name("nni_http_req_add_header") 
	public static int nniHttpReqAddHeader(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpReqAddHeader(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_req_add_header") 
	protected native static int nniHttpReqAddHeader(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * Original signature : <code>int nni_http_res_add_header(nni_http_res*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:79</i>
	 */
	@Name("nni_http_res_add_header") 
	public static int nniHttpResAddHeader(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpResAddHeader(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_res_add_header") 
	protected native static int nniHttpResAddHeader(@Ptr long nni_http_resPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * Original signature : <code>int nni_http_req_set_header(nni_http_req*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:81</i>
	 */
	@Name("nni_http_req_set_header") 
	public static int nniHttpReqSetHeader(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpReqSetHeader(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_req_set_header") 
	protected native static int nniHttpReqSetHeader(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * Original signature : <code>int nni_http_res_set_header(nni_http_res*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:83</i>
	 */
	@Name("nni_http_res_set_header") 
	public static int nniHttpResSetHeader(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpResSetHeader(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_res_set_header") 
	protected native static int nniHttpResSetHeader(@Ptr long nni_http_resPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * Original signature : <code>int nni_http_req_del_header(nni_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:85</i>
	 */
	@Name("nni_http_req_del_header") 
	public static int nniHttpReqDelHeader(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nniHttpReqDelHeader(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_req_del_header") 
	protected native static int nniHttpReqDelHeader(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int nni_http_res_del_header(nni_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:87</i>
	 */
	@Name("nni_http_res_del_header") 
	public static int nniHttpResDelHeader(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1) {
		return nniHttpResDelHeader(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_res_del_header") 
	protected native static int nniHttpResDelHeader(@Ptr long nni_http_resPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int nni_http_req_copy_data(nni_http_req*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:89</i>
	 */
	@Name("nni_http_req_copy_data") 
	public static int nniHttpReqCopyData(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nniHttpReqCopyData(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nni_http_req_copy_data") 
	protected native static int nniHttpReqCopyData(@Ptr long nni_http_reqPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nni_http_res_copy_data(nni_http_res*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:91</i>
	 */
	@Name("nni_http_res_copy_data") 
	public static int nniHttpResCopyData(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nniHttpResCopyData(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nni_http_res_copy_data") 
	protected native static int nniHttpResCopyData(@Ptr long nni_http_resPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nni_http_req_set_data(nni_http_req*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:93</i>
	 */
	@Name("nni_http_req_set_data") 
	public static int nniHttpReqSetData(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nniHttpReqSetData(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nni_http_req_set_data") 
	protected native static int nniHttpReqSetData(@Ptr long nni_http_reqPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>int nni_http_res_set_data(nni_http_res*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:95</i>
	 */
	@Name("nni_http_res_set_data") 
	public static int nniHttpResSetData(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<? > voidPtr1, long size_t1) {
		return nniHttpResSetData(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nni_http_res_set_data") 
	protected native static int nniHttpResSetData(@Ptr long nni_http_resPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>char* nni_http_req_get_method(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:97</i>
	 */
	@Name("nni_http_req_get_method") 
	public static Pointer<Byte > nniHttpReqGetMethod(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReqGetMethod(Pointer.getPeer(nni_http_reqPtr1)), Byte.class);
	}
	@Name("nni_http_req_get_method") 
	@Ptr 
	protected native static long nniHttpReqGetMethod(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>char* nni_http_req_get_version(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:99</i>
	 */
	@Name("nni_http_req_get_version") 
	public static Pointer<Byte > nniHttpReqGetVersion(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReqGetVersion(Pointer.getPeer(nni_http_reqPtr1)), Byte.class);
	}
	@Name("nni_http_req_get_version") 
	@Ptr 
	protected native static long nniHttpReqGetVersion(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>char* nni_http_req_get_uri(nni_http_req*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:101</i>
	 */
	@Name("nni_http_req_get_uri") 
	public static Pointer<Byte > nniHttpReqGetUri(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpReqGetUri(Pointer.getPeer(nni_http_reqPtr1)), Byte.class);
	}
	@Name("nni_http_req_get_uri") 
	@Ptr 
	protected native static long nniHttpReqGetUri(@Ptr long nni_http_reqPtr1);
	/**
	 * Original signature : <code>int nni_http_req_set_method(nni_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:103</i>
	 */
	@Name("nni_http_req_set_method") 
	public static int nniHttpReqSetMethod(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nniHttpReqSetMethod(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_req_set_method") 
	protected native static int nniHttpReqSetMethod(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int nni_http_req_set_version(nni_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:105</i>
	 */
	@Name("nni_http_req_set_version") 
	public static int nniHttpReqSetVersion(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nniHttpReqSetVersion(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_req_set_version") 
	protected native static int nniHttpReqSetVersion(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int nni_http_req_set_uri(nni_http_req*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:107</i>
	 */
	@Name("nni_http_req_set_uri") 
	public static int nniHttpReqSetUri(Pointer<HttpApiLibrary.nng_http_req > nni_http_reqPtr1, Pointer<Byte > charPtr1) {
		return nniHttpReqSetUri(Pointer.getPeer(nni_http_reqPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_req_set_uri") 
	protected native static int nniHttpReqSetUri(@Ptr long nni_http_reqPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>uint16_t nni_http_res_get_status(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:109</i>
	 */
	@Name("nni_http_res_get_status") 
	public static short nniHttpResGetStatus(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return nniHttpResGetStatus(Pointer.getPeer(nni_http_resPtr1));
	}
	@Name("nni_http_res_get_status") 
	protected native static short nniHttpResGetStatus(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>int nni_http_res_set_status(nni_http_res*, uint16_t)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:111</i>
	 */
	@Name("nni_http_res_set_status") 
	public static int nniHttpResSetStatus(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, short uint16_t1) {
		return nniHttpResSetStatus(Pointer.getPeer(nni_http_resPtr1), uint16_t1);
	}
	@Name("nni_http_res_set_status") 
	protected native static int nniHttpResSetStatus(@Ptr long nni_http_resPtr1, short uint16_t1);
	/**
	 * Original signature : <code>char* nni_http_res_get_version(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:113</i>
	 */
	@Name("nni_http_res_get_version") 
	public static Pointer<Byte > nniHttpResGetVersion(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpResGetVersion(Pointer.getPeer(nni_http_resPtr1)), Byte.class);
	}
	@Name("nni_http_res_get_version") 
	@Ptr 
	protected native static long nniHttpResGetVersion(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>int nni_http_res_set_version(nni_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:115</i>
	 */
	@Name("nni_http_res_set_version") 
	public static int nniHttpResSetVersion(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1) {
		return nniHttpResSetVersion(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_res_set_version") 
	protected native static int nniHttpResSetVersion(@Ptr long nni_http_resPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>char* nni_http_res_get_reason(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:117</i>
	 */
	@Name("nni_http_res_get_reason") 
	public static Pointer<Byte > nniHttpResGetReason(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpResGetReason(Pointer.getPeer(nni_http_resPtr1)), Byte.class);
	}
	@Name("nni_http_res_get_reason") 
	@Ptr 
	protected native static long nniHttpResGetReason(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>int nni_http_res_set_reason(nni_http_res*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:119</i>
	 */
	@Name("nni_http_res_set_reason") 
	public static int nniHttpResSetReason(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1, Pointer<Byte > charPtr1) {
		return nniHttpResSetReason(Pointer.getPeer(nni_http_resPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_res_set_reason") 
	protected native static int nniHttpResSetReason(@Ptr long nni_http_resPtr1, @Ptr long charPtr1);
	/**
	 * the HTML body with customized content if it exists.<br>
	 * Original signature : <code>bool nni_http_res_is_error(nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:124</i>
	 */
	@Name("nni_http_res_is_error") 
	public static boolean nniHttpResIsError(Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return nniHttpResIsError(Pointer.getPeer(nni_http_resPtr1));
	}
	@Name("nni_http_res_is_error") 
	protected native static boolean nniHttpResIsError(@Ptr long nni_http_resPtr1);
	/**
	 * Original signature : <code>void nni_http_read(nni_http_conn*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:126</i>
	 */
	@Name("nni_http_read") 
	public static void nniHttpRead(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpRead(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_read") 
	protected native static void nniHttpRead(@Ptr long nni_http_connPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_read_full(nni_http_conn*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:128</i>
	 */
	@Name("nni_http_read_full") 
	public static void nniHttpReadFull(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpReadFull(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_read_full") 
	protected native static void nniHttpReadFull(@Ptr long nni_http_connPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_write(nni_http_conn*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:130</i>
	 */
	@Name("nni_http_write") 
	public static void nniHttpWrite(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpWrite(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_write") 
	protected native static void nniHttpWrite(@Ptr long nni_http_connPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>void nni_http_write_full(nni_http_conn*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:132</i>
	 */
	@Name("nni_http_write_full") 
	public static void nniHttpWriteFull(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpWriteFull(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_write_full") 
	protected native static void nniHttpWriteFull(@Ptr long nni_http_connPtr1, @Ptr long nni_aioPtr1);
	/**
	 * Original signature : <code>int nni_http_sock_addr(nni_http_conn*, nni_sockaddr*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:134</i>
	 */
	@Name("nni_http_sock_addr") 
	public static int nniHttpSockAddr(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_sockaddr > nni_sockaddrPtr1) {
		return nniHttpSockAddr(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_sockaddrPtr1));
	}
	@Name("nni_http_sock_addr") 
	protected native static int nniHttpSockAddr(@Ptr long nni_http_connPtr1, @Ptr long nni_sockaddrPtr1);
	/**
	 * Original signature : <code>int nni_http_peer_addr(nni_http_conn*, nni_sockaddr*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:136</i>
	 */
	@Name("nni_http_peer_addr") 
	public static int nniHttpPeerAddr(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1, Pointer<nng_sockaddr > nni_sockaddrPtr1) {
		return nniHttpPeerAddr(Pointer.getPeer(nni_http_connPtr1), Pointer.getPeer(nni_sockaddrPtr1));
	}
	@Name("nni_http_peer_addr") 
	protected native static int nniHttpPeerAddr(@Ptr long nni_http_connPtr1, @Ptr long nni_sockaddrPtr1);
	/**
	 * nni_http_tls_verified returns true if the peer has been verified using TLS.<br>
	 * Original signature : <code>bool nni_http_tls_verified(nni_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:141</i>
	 */
	@Name("nni_http_tls_verified") 
	public static boolean nniHttpTlsVerified(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1) {
		return nniHttpTlsVerified(Pointer.getPeer(nni_http_connPtr1));
	}
	@Name("nni_http_tls_verified") 
	protected native static boolean nniHttpTlsVerified(@Ptr long nni_http_connPtr1);
	/**
	 * convert to binding to the default port on all interfaces on the host.<br>
	 * Original signature : <code>int nni_http_server_init(nni_http_server**, const nni_url*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:146</i>
	 */
	@Name("nni_http_server_init") 
	public static int nniHttpServerInit(Pointer<Pointer<HttpApiLibrary.nng_http_server > > nni_http_serverPtrPtr1, Pointer<nng_url > nni_urlPtr1) {
		return nniHttpServerInit(Pointer.getPeer(nni_http_serverPtrPtr1), Pointer.getPeer(nni_urlPtr1));
	}
	@Name("nni_http_server_init") 
	protected native static int nniHttpServerInit(@Ptr long nni_http_serverPtrPtr1, @Ptr long nni_urlPtr1);
	/**
	 * all related resources.  It will not affect hijacked connections.<br>
	 * Original signature : <code>void nni_http_server_fini(nni_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:151</i>
	 */
	@Name("nni_http_server_fini") 
	public static void nniHttpServerFini(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1) {
		nniHttpServerFini(Pointer.getPeer(nni_http_serverPtr1));
	}
	@Name("nni_http_server_fini") 
	protected native static void nniHttpServerFini(@Ptr long nni_http_serverPtr1);
	/**
	 * Method, and URL.)<br>
	 * Original signature : <code>int nni_http_server_add_handler(nni_http_server*, nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:156</i>
	 */
	@Name("nni_http_server_add_handler") 
	public static int nniHttpServerAddHandler(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		return nniHttpServerAddHandler(Pointer.getPeer(nni_http_serverPtr1), Pointer.getPeer(nni_http_handlerPtr1));
	}
	@Name("nni_http_server_add_handler") 
	protected native static int nniHttpServerAddHandler(@Ptr long nni_http_serverPtr1, @Ptr long nni_http_handlerPtr1);
	/**
	 * to make assumptions about the validity of the handler.<br>
	 * Original signature : <code>int nni_http_server_del_handler(nni_http_server*, nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:161</i>
	 */
	@Name("nni_http_server_del_handler") 
	public static int nniHttpServerDelHandler(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		return nniHttpServerDelHandler(Pointer.getPeer(nni_http_serverPtr1), Pointer.getPeer(nni_http_handlerPtr1));
	}
	@Name("nni_http_server_del_handler") 
	protected native static int nniHttpServerDelHandler(@Ptr long nni_http_serverPtr1, @Ptr long nni_http_handlerPtr1);
	/**
	 * over the TLS configuration.<br>
	 * Original signature : <code>int nni_http_server_set_tls(nni_http_server*, nng_tls_config*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:166</i>
	 */
	@Name("nni_http_server_set_tls") 
	public static int nniHttpServerSetTls(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, Pointer<nng_tls_config > nng_tls_configPtr1) {
		return nniHttpServerSetTls(Pointer.getPeer(nni_http_serverPtr1), Pointer.getPeer(nng_tls_configPtr1));
	}
	@Name("nni_http_server_set_tls") 
	protected native static int nniHttpServerSetTls(@Ptr long nni_http_serverPtr1, @Ptr long nng_tls_configPtr1);
	/**
	 * nni_http_server_set_tls function is called, so be careful.<br>
	 * Original signature : <code>int nni_http_server_get_tls(nni_http_server*, nng_tls_config**)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:171</i>
	 */
	@Name("nni_http_server_get_tls") 
	public static int nniHttpServerGetTls(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, Pointer<Pointer<nng_tls_config > > nng_tls_configPtrPtr1) {
		return nniHttpServerGetTls(Pointer.getPeer(nni_http_serverPtr1), Pointer.getPeer(nng_tls_configPtrPtr1));
	}
	@Name("nni_http_server_get_tls") 
	protected native static int nniHttpServerGetTls(@Ptr long nni_http_serverPtr1, @Ptr long nng_tls_configPtrPtr1);
	/**
	 * nni_http_server_start starts listening on the supplied port.<br>
	 * Original signature : <code>int nni_http_server_start(nni_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:176</i>
	 */
	@Name("nni_http_server_start") 
	public static int nniHttpServerStart(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1) {
		return nniHttpServerStart(Pointer.getPeer(nni_http_serverPtr1));
	}
	@Name("nni_http_server_start") 
	protected native static int nniHttpServerStart(@Ptr long nni_http_serverPtr1);
	/**
	 * associated with a callback will complete their callback, and then close.<br>
	 * Original signature : <code>void nni_http_server_stop(nni_http_server*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:181</i>
	 */
	@Name("nni_http_server_stop") 
	public static void nniHttpServerStop(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1) {
		nniHttpServerStop(Pointer.getPeer(nni_http_serverPtr1));
	}
	@Name("nni_http_server_stop") 
	protected native static void nniHttpServerStop(@Ptr long nni_http_serverPtr1);
	/**
	 * nni_http_server_set_error_page sets an error page for the named status.<br>
	 * Original signature : <code>int nni_http_server_set_error_page(nni_http_server*, uint16_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:186</i>
	 */
	@Name("nni_http_server_set_error_page") 
	public static int nniHttpServerSetErrorPage(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, short uint16_t1, Pointer<Byte > charPtr1) {
		return nniHttpServerSetErrorPage(Pointer.getPeer(nni_http_serverPtr1), uint16_t1, Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_server_set_error_page") 
	protected native static int nniHttpServerSetErrorPage(@Ptr long nni_http_serverPtr1, short uint16_t1, @Ptr long charPtr1);
	/**
	 * nni_http_server_set_error_page sets an error file for the named status.<br>
	 * Original signature : <code>int nni_http_server_set_error_file(nni_http_server*, uint16_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:191</i>
	 */
	@Name("nni_http_server_set_error_file") 
	public static int nniHttpServerSetErrorFile(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, short uint16_t1, Pointer<Byte > charPtr1) {
		return nniHttpServerSetErrorFile(Pointer.getPeer(nni_http_serverPtr1), uint16_t1, Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_server_set_error_file") 
	protected native static int nniHttpServerSetErrorFile(@Ptr long nni_http_serverPtr1, short uint16_t1, @Ptr long charPtr1);
	/**
	 * of the res.  The res must have the status set first.<br>
	 * Original signature : <code>int nni_http_server_res_error(nni_http_server*, nni_http_res*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:196</i>
	 */
	@Name("nni_http_server_res_error") 
	public static int nniHttpServerResError(Pointer<HttpApiLibrary.nng_http_server > nni_http_serverPtr1, Pointer<HttpApiLibrary.nng_http_res > nni_http_resPtr1) {
		return nniHttpServerResError(Pointer.getPeer(nni_http_serverPtr1), Pointer.getPeer(nni_http_resPtr1));
	}
	@Name("nni_http_server_res_error") 
	protected native static int nniHttpServerResError(@Ptr long nni_http_serverPtr1, @Ptr long nni_http_resPtr1);
	/**
	 * further processing.)<br>
	 * Original signature : <code>int nni_http_hijack(nni_http_conn*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:201</i>
	 */
	@Name("nni_http_hijack") 
	public static int nniHttpHijack(Pointer<HttpApiLibrary.nng_http_conn > nni_http_connPtr1) {
		return nniHttpHijack(Pointer.getPeer(nni_http_connPtr1));
	}
	@Name("nni_http_hijack") 
	protected native static int nniHttpHijack(@Ptr long nni_http_connPtr1);
	/**
	 * to hijack the session.<br>
	 * Original signature : <code>int nni_http_handler_init(nni_http_handler**, const char*, NniHttpHandlerInitArg1Callback*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:206</i>
	 */
	@Name("nni_http_handler_init") 
	public static int nniHttpHandlerInit(Pointer<Pointer<HttpApiLibrary.nng_http_handler > > nni_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<HttpApiLibrary.NniHttpHandlerInitArg1Callback > arg1) {
		return nniHttpHandlerInit(Pointer.getPeer(nni_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(arg1));
	}
	@Name("nni_http_handler_init") 
	protected native static int nniHttpHandlerInit(@Ptr long nni_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long arg1);
	/**
	 * up a file named in the last argument.<br>
	 * Original signature : <code>int nni_http_handler_init_file(nni_http_handler**, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:211</i>
	 */
	@Name("nni_http_handler_init_file") 
	public static int nniHttpHandlerInitFile(Pointer<Pointer<HttpApiLibrary.nng_http_handler > > nni_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpHandlerInitFile(Pointer.getPeer(nni_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_handler_init_file") 
	protected native static int nniHttpHandlerInitFile(@Ptr long nni_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * provides for setting the Content-Type explicitly (last argument).<br>
	 * Original signature : <code>int nni_http_handler_init_file_ctype(nni_http_handler**, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:216</i>
	 */
	@Name("nni_http_handler_init_file_ctype") 
	public static int nniHttpHandlerInitFileCtype(Pointer<Pointer<HttpApiLibrary.nng_http_handler > > nni_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3) {
		return nniHttpHandlerInitFileCtype(Pointer.getPeer(nni_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2), Pointer.getPeer(charPtr3));
	}
	@Name("nni_http_handler_init_file_ctype") 
	protected native static int nniHttpHandlerInitFileCtype(@Ptr long nni_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long charPtr2, @Ptr long charPtr3);
	/**
	 * listings for security reasons.<br>
	 * Original signature : <code>int nni_http_handler_init_directory(nni_http_handler**, const char*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:221</i>
	 */
	@Name("nni_http_handler_init_directory") 
	public static int nniHttpHandlerInitDirectory(Pointer<Pointer<HttpApiLibrary.nng_http_handler > > nni_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2) {
		return nniHttpHandlerInitDirectory(Pointer.getPeer(nni_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_handler_init_directory") 
	protected native static int nniHttpHandlerInitDirectory(@Ptr long nni_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long charPtr2);
	/**
	 * supplied, with the Content-Type supplied in the final argument.<br>
	 * Original signature : <code>int nni_http_handler_init_static(nni_http_handler**, const char*, const void*, size_t, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:226</i>
	 */
	@Name("nni_http_handler_init_static") 
	public static int nniHttpHandlerInitStatic(Pointer<Pointer<HttpApiLibrary.nng_http_handler > > nni_http_handlerPtrPtr1, Pointer<Byte > charPtr1, Pointer<? > voidPtr1, long size_t1, Pointer<Byte > charPtr2) {
		return nniHttpHandlerInitStatic(Pointer.getPeer(nni_http_handlerPtrPtr1), Pointer.getPeer(charPtr1), Pointer.getPeer(voidPtr1), size_t1, Pointer.getPeer(charPtr2));
	}
	@Name("nni_http_handler_init_static") 
	protected native static int nniHttpHandlerInitStatic(@Ptr long nni_http_handlerPtrPtr1, @Ptr long charPtr1, @Ptr long voidPtr1, long size_t1, @Ptr long charPtr2);
	/**
	 * calls this for any handlers still registered with it if it is destroyed.<br>
	 * Original signature : <code>void nni_http_handler_fini(nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:231</i>
	 */
	@Name("nni_http_handler_fini") 
	public static void nniHttpHandlerFini(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		nniHttpHandlerFini(Pointer.getPeer(nni_http_handlerPtr1));
	}
	@Name("nni_http_handler_fini") 
	protected native static void nniHttpHandlerFini(@Ptr long nni_http_handlerPtr1);
	/**
	 * will probably need to inspect the URL of the request.<br>
	 * Original signature : <code>int nni_http_handler_set_tree(nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:236</i>
	 */
	@Name("nni_http_handler_set_tree") 
	public static int nniHttpHandlerSetTree(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		return nniHttpHandlerSetTree(Pointer.getPeer(nni_http_handlerPtr1));
	}
	@Name("nni_http_handler_set_tree") 
	protected native static int nniHttpHandlerSetTree(@Ptr long nni_http_handlerPtr1);
	/**
	 * server only listens on a single port.<br>
	 * Original signature : <code>int nni_http_handler_set_host(nni_http_handler*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:241</i>
	 */
	@Name("nni_http_handler_set_host") 
	public static int nniHttpHandlerSetHost(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1, Pointer<Byte > charPtr1) {
		return nniHttpHandlerSetHost(Pointer.getPeer(nni_http_handlerPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_handler_set_host") 
	protected native static int nniHttpHandlerSetHost(@Ptr long nni_http_handlerPtr1, @Ptr long charPtr1);
	/**
	 * server does not make its own copy.)<br>
	 * Original signature : <code>int nni_http_handler_set_method(nni_http_handler*, const char*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:246</i>
	 */
	@Name("nni_http_handler_set_method") 
	public static int nniHttpHandlerSetMethod(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1, Pointer<Byte > charPtr1) {
		return nniHttpHandlerSetMethod(Pointer.getPeer(nni_http_handlerPtr1), Pointer.getPeer(charPtr1));
	}
	@Name("nni_http_handler_set_method") 
	protected native static int nniHttpHandlerSetMethod(@Ptr long nni_http_handlerPtr1, @Ptr long charPtr1);
	/**
	 * data as its argument, when the handler is being destroyed.<br>
	 * Original signature : <code>int nni_http_handler_set_data(nni_http_handler*, void*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:251</i>
	 */
	@Name("nni_http_handler_set_data") 
	public static int nniHttpHandlerSetData(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1, Pointer<? > voidPtr1) {
		return nniHttpHandlerSetData(Pointer.getPeer(nni_http_handlerPtr1), Pointer.getPeer(voidPtr1));
	}
	@Name("nni_http_handler_set_data") 
	protected native static int nniHttpHandlerSetData(@Ptr long nni_http_handlerPtr1, @Ptr long voidPtr1);
	/**
	 * is supplied.<br>
	 * Original signature : <code>void* nni_http_handler_get_data(nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:256</i>
	 */
	@Name("nni_http_handler_get_data") 
	public static Pointer<? > nniHttpHandlerGetData(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		return Pointer.pointerToAddress(nniHttpHandlerGetData(Pointer.getPeer(nni_http_handlerPtr1)));
	}
	@Name("nni_http_handler_get_data") 
	@Ptr 
	protected native static long nniHttpHandlerGetData(@Ptr long nni_http_handlerPtr1);
	/**
	 * nni_http_handler_get_uri returns the URI set on the handler.<br>
	 * Original signature : <code>char* nni_http_handler_get_uri(nni_http_handler*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:261</i>
	 */
	@Name("nni_http_handler_get_uri") 
	public static Pointer<Byte > nniHttpHandlerGetUri(Pointer<HttpApiLibrary.nng_http_handler > nni_http_handlerPtr1) {
		return (Pointer)Pointer.pointerToAddress(nniHttpHandlerGetUri(Pointer.getPeer(nni_http_handlerPtr1)), Byte.class);
	}
	@Name("nni_http_handler_get_uri") 
	@Ptr 
	protected native static long nniHttpHandlerGetUri(@Ptr long nni_http_handlerPtr1);
	/**
	 * Client stuff.<br>
	 * Original signature : <code>int nni_http_client_init(nni_http_client**, const nni_url*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:266</i>
	 */
	@Name("nni_http_client_init") 
	public static int nniHttpClientInit(Pointer<Pointer<HttpApiLibrary.nng_http_client > > nni_http_clientPtrPtr1, Pointer<nng_url > nni_urlPtr1) {
		return nniHttpClientInit(Pointer.getPeer(nni_http_clientPtrPtr1), Pointer.getPeer(nni_urlPtr1));
	}
	@Name("nni_http_client_init") 
	protected native static int nniHttpClientInit(@Ptr long nni_http_clientPtrPtr1, @Ptr long nni_urlPtr1);
	/**
	 * Original signature : <code>void nni_http_client_fini(nni_http_client*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:268</i>
	 */
	@Name("nni_http_client_fini") 
	public static void nniHttpClientFini(Pointer<HttpApiLibrary.nng_http_client > nni_http_clientPtr1) {
		nniHttpClientFini(Pointer.getPeer(nni_http_clientPtr1));
	}
	@Name("nni_http_client_fini") 
	protected native static void nniHttpClientFini(@Ptr long nni_http_clientPtr1);
	/**
	 * caller needs complete control over the TLS configuration.<br>
	 * Original signature : <code>int nni_http_client_set_tls(nni_http_client*, nng_tls_config*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:273</i>
	 */
	@Name("nni_http_client_set_tls") 
	public static int nniHttpClientSetTls(Pointer<HttpApiLibrary.nng_http_client > nni_http_clientPtr1, Pointer<nng_tls_config > nng_tls_configPtr1) {
		return nniHttpClientSetTls(Pointer.getPeer(nni_http_clientPtr1), Pointer.getPeer(nng_tls_configPtr1));
	}
	@Name("nni_http_client_set_tls") 
	protected native static int nniHttpClientSetTls(@Ptr long nni_http_clientPtr1, @Ptr long nng_tls_configPtr1);
	/**
	 * be invalidated by any future calls to nni_http_client_set_tls.<br>
	 * Original signature : <code>int nni_http_client_get_tls(nni_http_client*, nng_tls_config**)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:278</i>
	 */
	@Name("nni_http_client_get_tls") 
	public static int nniHttpClientGetTls(Pointer<HttpApiLibrary.nng_http_client > nni_http_clientPtr1, Pointer<Pointer<nng_tls_config > > nng_tls_configPtrPtr1) {
		return nniHttpClientGetTls(Pointer.getPeer(nni_http_clientPtr1), Pointer.getPeer(nng_tls_configPtrPtr1));
	}
	@Name("nni_http_client_get_tls") 
	protected native static int nniHttpClientGetTls(@Ptr long nni_http_clientPtr1, @Ptr long nng_tls_configPtrPtr1);
	/**
	 * Original signature : <code>void nni_http_client_connect(nni_http_client*, nni_aio*)</code><br>
	 * <i>native declaration : supplemental/http/http_api.h:280</i>
	 */
	@Name("nni_http_client_connect") 
	public static void nniHttpClientConnect(Pointer<HttpApiLibrary.nng_http_client > nni_http_clientPtr1, Pointer<nng_aio > nni_aioPtr1) {
		nniHttpClientConnect(Pointer.getPeer(nni_http_clientPtr1), Pointer.getPeer(nni_aioPtr1));
	}
	@Name("nni_http_client_connect") 
	protected native static void nniHttpClientConnect(@Ptr long nni_http_clientPtr1, @Ptr long nni_aioPtr1);
	/** Undefined type */
	public static interface nng_http_res {
		
	};
	/** Undefined type */
	public static interface nng_http_server {
		
	};
	/** Undefined type */
	public static interface nng_http_handler {
		
	};
	/** Undefined type */
	public static interface nng_http_client {
		
	};
	/** Undefined type */
	public static interface nng_http_conn {
		
	};
	/** Undefined type */
	public static interface nng_http_req {
		
	};
}
