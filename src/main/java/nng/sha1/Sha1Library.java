package nng.sha1;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>sha1</b><br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="https://github.com/nativelibs4java">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("sha1") 
@Runtime(CRuntime.class) 
public class Sha1Library {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>void nni_sha1_init(nni_sha1_ctx*)</code><br>
	 * <i>native declaration : supplemental/sha1/sha1.h:11</i>
	 */
	@Name("nni_sha1_init") 
	public static void nniSha1Init(Pointer<nni_sha1_ctx > nni_sha1_ctxPtr1) {
		nniSha1Init(Pointer.getPeer(nni_sha1_ctxPtr1));
	}
	@Name("nni_sha1_init") 
	protected native static void nniSha1Init(@Ptr long nni_sha1_ctxPtr1);
	/**
	 * Original signature : <code>void nni_sha1_update(nni_sha1_ctx*, const void*, size_t)</code><br>
	 * <i>native declaration : supplemental/sha1/sha1.h:13</i>
	 */
	@Name("nni_sha1_update") 
	public static void nniSha1Update(Pointer<nni_sha1_ctx > nni_sha1_ctxPtr1, Pointer<? > voidPtr1, long size_t1) {
		nniSha1Update(Pointer.getPeer(nni_sha1_ctxPtr1), Pointer.getPeer(voidPtr1), size_t1);
	}
	@Name("nni_sha1_update") 
	protected native static void nniSha1Update(@Ptr long nni_sha1_ctxPtr1, @Ptr long voidPtr1, long size_t1);
	/**
	 * Original signature : <code>void nni_sha1_final(nni_sha1_ctx*, uint8_t[20])</code><br>
	 * <i>native declaration : supplemental/sha1/sha1.h:15</i>
	 */
	@Name("nni_sha1_final") 
	public static void nniSha1Final(Pointer<nni_sha1_ctx > nni_sha1_ctxPtr1, Pointer<Byte > uint8_tArr1) {
		nniSha1Final(Pointer.getPeer(nni_sha1_ctxPtr1), Pointer.getPeer(uint8_tArr1));
	}
	@Name("nni_sha1_final") 
	protected native static void nniSha1Final(@Ptr long nni_sha1_ctxPtr1, @Ptr long uint8_tArr1);
	/**
	 * Original signature : <code>void nni_sha1(const void*, size_t, uint8_t[20])</code><br>
	 * <i>native declaration : supplemental/sha1/sha1.h:17</i>
	 */
	@Name("nni_sha1") 
	public static void nniSha1(Pointer<? > voidPtr1, long size_t1, Pointer<Byte > uint8_tArr1) {
		nniSha1(Pointer.getPeer(voidPtr1), size_t1, Pointer.getPeer(uint8_tArr1));
	}
	@Name("nni_sha1") 
	protected native static void nniSha1(@Ptr long voidPtr1, long size_t1, @Ptr long uint8_tArr1);
}
