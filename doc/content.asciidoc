= nngjvm documentation
Fred Eisele, <phreed@gmail.com>
:toc: left
:numbered:
:sectlinks:


== Introduction

link:http://nanomsg.org[nng] is a socket library that provides common communication patterns.
It aims to make the networking layer fast, scalable, and easy to use.

== Project Maturity

_nngjvm_ is a new project and provides bindings to nng.


== Usage

This section covers a installation of _nngjvm_.

=== Gradle

If you are using gradle, this is a dependency line for gradle dsl:

[source,groovy]
----
compile "babeloff:nngjvm:0.1.0"
----


=== Get the Code

_nngjvm_ is open source and you can found the source on link:https://github.com/babeloff/nngjvm[github].


== Supported features

=== Transports

_nngjvm_ implements the new NNG API and makes no effort to provide 
backward compatibilty with nanomsg.

=== Protocols


[NOTE]
For explainations of the protocols see the respective RFCs.
link:https://github.com/nanomsg/rfcs



== User Guide for Java

=== Introduction

The java api supports each socket type in a specific java package.

You can see in more detailed java api on the link:api/java/index.html[javadoc].


=== Creating a socket

Let start creating a new socket and listening messages. For the below examples, we'll use a
Req/Rep socket types.

.Example creating a RepSocket and bind it to unix socket endpoint.
[source,java]
----
import nng.reqrep.RepSocket;

public class Server {
    public static void main(String[] args) {
        final RepSocket s = new RepSocket();
        s.bind("tcp:///tmp/sock");
    }
}
----


=== Connecting to a socket

Let start connecting to existing socket. For it we'll use a ReqSocket class.

.Creating a ReqSocket intance and connect to unix socket endpoint.
[source,java]
----
import nng.reqrep.ReqSocket;

public class Client {
    public static void main(String[] args) {
        final ReqSocket s = new ReqSocket();
        s.connect("tcp:///tmp/sock");
    }
}
----


=== Socket types

==== PubSub Sockets

This protocol has two socket types:

- _publisher_ - This socket is used to distribute messages to multiple destinations. Receive
  operation is not defined.
- _subscriber_ - Receives messages from the publisher. Only messages that the socket is subscribed
  to are received. When the socket is created there are no subscriptions and thus no messages will
  be received. Send operation is not defined on this socket.

Example of using pub/sub protocols in java:


._Publisher.java_
[source,java]
----
import nng.pubsub.PubSocket;

public class Publisher {
    public static void main(String[] args) {
        PubSocket sock = new PubSocket();
        sock.bind("ipc:///tmp/sock");

        for(int i=0; i<5; i++) {
            sock.send("test msg");
        }

        sock.close()
    }
}
----

._Subscriber.java_
[source,java]
----
import nng.pubsub.SubSocket;

public class Subscriber {
    public static void main(String[] args) {
        SubSocket sock = new SubSocket();
        sock.connect("ipc:///tmp/sock");
        sock.subscribe("test");

        for(int i=0; i<5; i++) {
            System.out.println(sock.recvString());
        }

        sock.close()
    }
}
----


==== Req/Rep Sockets

This protocol is used to distribute the workload among multiple stateless workers, and it's represented
by two socket types:

- _req_ - Used to implement the client application that sends requests and receives replies.
- _rep_ - Used to implement the stateless worker that receives requests and sends replies.

NOTE: Both sockets implements read and write methods.

._EchoServer.java_
[source,java]
----
import nng.reqrep.RepSocket;

public class EchoServer {
    public static void main(String[] args) {
        RepSocket sock = new RepSocket();
        sock.bind("tcp://*:6789");

        while (true) {
            byte[] receivedData = sock.recvBytes();
            sock.sendBytes(receivedData);
        }

        sock.close()
    }
}
----

._EchoClient.java_
[source,java]
----
import nng.reqrep.ReqSocket;

public class EchoClient {
    public static void main(String[] args) {
        ReqSocket sock = new ReqSocket();
        sock.connect("tcp://localhost:6789");

        for (int i=0; i<5; i++) {
            sock.send("Hello!" + 1);
            System.out.println("Received:" + sock.recvString());
        }

        sock.close()
    }
}
----


==== Push/Pull Sockets.

Scalability protocol for passing tasks through a series of processing steps and it's represented
by two socket types:

- _push_ - This socket is used to send messages to a cluster of load-balanced nodes. Receive
  operation is not implemented on this socket type.
- _pull_ - This socket is used to receive a message from a cluster of nodes. Send operation is not
  implemented on this socket type.

._Dispatcher.java_
[source,java]
----
import nng.pipeline.PushSocket;
import java.util.ArrayList;
import java.util.List;

public class Dispatcher {
    public static void main(String[] args) {
        PushSocket sock = new PushSocket();
        sock.bind("tcp://*:6789");

        List<String> people = new ArrayList<String>();
        people.add("Foo");
        people.add("Bar");
        people.add("Baz");

        for(int i=0; i<people.size(); ++i) {
            sock.send(people.get(i));
        }

        sock.close();
    }
}
----

._Greeter.java_
[source,java]
----
import nng.pipeline.PullSocket;

public class Greeter {
    public static void main(String[] args) {
        PullSocket sock = new PullSocket();
        sock.connect("tcp://localhost:6789");

        for (int i=0; i<3; i++) {
            System.out.println("Hello " + sock.recvString());
        }

        sock.close()
    }
}
----


=== Non blocking sockets

nng also comes with support for non-blocking sockets, and exposes it with simple and
unopinionated callback based interface.

In java, the async socket is a simple class that receives a normal socket instance as unique
argument to its constructor and exposes api for non-blocking operations.

[source,java]
----
import nng.pipeline.PullSocket;
import nng.async.AsyncSocket;
import nng.async.IAsyncCallback;

public class Greeter {
    public static void main(String[] args) {

        // Create a normal instance of any socket type
        final PullSocket sock = new PullSocket();

        // Create a ligweight async layer around the previously
        // created pull socket.
        final AsyncSocket asyncSock = new AsyncSocket(sock);

        // Use the standard socket connect method for connect
        // to remote endpoint.
        sock.connect("tcp://localhost:6789");

        // Use the async socket instance for execute
        // send/recv operations asynchronously.
        asyncSock.recvString(new IAsyncCallback<String> {
            public void success(final String data) {
                System.out.println("Hello " + data);
            }

            public void fail(Throwable t) {
                System.out.println("Error: " + t.toString());
            }
        });
    }
}
----


== Faq

[appendix]
== License

----
The MIT License

Copyright 2018 Fredrick Eisele <fred.eisele@vanderbilt.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
----

[appendix]
== References

https://github.com/nativelibs4java/JNAerator

